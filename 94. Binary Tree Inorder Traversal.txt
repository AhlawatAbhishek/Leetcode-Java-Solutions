/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        popuList(root, res);
        return res;
    }
    //moris traversal using constant space and O(n) time
    private void popuList(TreeNode root, List<Integer> res){
        while(root != null){
            if(root.left != null){
               TreeNode pred = root.left;//this predecessor is the in-order predecessor
               while(pred.right != null && pred.right != root){
                  pred = pred.right;
               }
               if(pred.right == null){
                  pred.right = root;
                  root = root.left;
               }else{//visiting root for the second time means you came here using the link now it's time to cut this link off   
                  res.add(root.val);
                  pred.right = null;
                  root = root.right; 
               }
           }else{
                res.add(root.val);
                root = root.right;
            }
        }
    }
}