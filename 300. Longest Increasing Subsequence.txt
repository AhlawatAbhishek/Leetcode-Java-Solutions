TC: O(N^2) 
AS: O(N)
class Solution {
    public int lengthOfLIS(int[] nums) {
        int dp[] = new int[nums.length];
        Arrays.fill(dp, 1);
        int maxLen = 1;
        for(int i = 1; i<nums.length; i++){
            for(int j = i-1; j>= 0; j--){
                if(nums[i]>nums[j]){
                    dp[i] = Math.max(dp[j]+1, dp[i]);
                }
            }
        }
        for(int i : dp){
            maxLen = Math.max(maxLen, i);
        }
        return maxLen;
    }
}
--------------------------------
//Patience Sort Algorithm
TC:O(NLogN)
AS:O(N)
class Solution {
    public int lengthOfLIS(int[] nums) {
      TreeSet<Integer> bst = new TreeSet<Integer>();
        for(int i : nums){
            Integer higherOrEqual = bst.ceiling(i);
            if(higherOrEqual == null){
                bst.add(i);
            }else{
                bst.remove(higherOrEqual);
                bst.add(i);
            }
        }
        return bst.size();
    }
}
-------------------------
//Patience Sort Algorithm
   int lengthOfLIS(int nums[]) {
        int len= 0, dp[]= new int[nums.length];
        for(int num:nums) {
            int i= upperBound(dp, len, num);
            if(i==len) ++len;
            dp[i]= num;
        }
        return len;
    }
    
    int upperBound(int[] dp, int len, int num){
        int l= 0, r= len-1;
        int ans= len;
///Add equal to in 'dp[mid]<num' if you want  increasing subsequence's length with dupplicates
        while(l<=r){
            int mid= (l+r)/2;
            if(dp[mid]<num){
                l= mid+1;
            }else{
                ans= mid;
                r= mid-1;
            }
        }
        return ans;        
    }