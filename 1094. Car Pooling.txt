class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
        if(trips.length == 1){
           if(trips[0][0] <= capacity)     
            return true;
           else
            return false;   
        }
        int maxEnd = -1;
        for(int trip[] : trips){
            maxEnd = Math.max(trip[2], maxEnd);
        }
        int eLen = maxEnd +  1;
        int []ends = new int[eLen], strts = new int[eLen];
        int currCap = capacity;
        for(int indx = 0; indx<trips.length; indx++){
             ends[trips[indx][2]] += trips[indx][0];
             strts[trips[indx][1]] += -trips[indx][0];
        }
        for(int dist = 0; dist<eLen-1; dist++){
            currCap += strts[dist] + ends[dist];
            if(currCap < 0)return false;
        }
        return true;
    }
}
---------------------------------------------------------------------------------

class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
       Map<Integer, Integer> cap = new TreeMap<>();
       for(int []trip: trips){
         int strt = trip[1], end = trip[2], reqCap = trip[0];
         cap.put(strt, cap.getOrDefault(strt, 0)-reqCap);
         cap.put(end,  cap.getOrDefault(end, 0)+reqCap);
       }
       int currCap = capacity;
       for(int capac : cap.values()){
        currCap += capac;
        if(currCap < 0){
            return false;
        }
       }
       return true;
    }
}