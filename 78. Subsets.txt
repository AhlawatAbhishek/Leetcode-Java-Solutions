class Solution {
private: 
        vector<vector<int>> res;
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<int> blank, curr;
        res.push_back(blank);
        findSubset(nums, 0, curr);
        return res;
    }
private:
     void findSubset(vector<int>& nums, int strt, vector<int>& curr){
        if(curr.size() > 0){
            vector<int> currCopy(curr);
            res.push_back(currCopy);
        }
        for(int indx = strt; indx<nums.size(); indx++){
            curr.push_back(nums[indx]);
            findSubset(nums, indx+1, curr);
            curr.erase(curr.end()-1);
        }
    }
};
----------------------------------
class Solution {
    private List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> subsets(int[] nums) {
        res.add(new ArrayList<>());
        findSubset(nums, 0, new ArrayList<>());
        return res;
    }
    private void findSubset(int nums[], int strt, List<Integer> curr){
        if(curr.size() > 0){
            res.add(new ArrayList<>(curr));
        }
        for(int indx = strt; indx<nums.length; indx++){
            curr.add(nums[indx]);
            findSubset(nums, indx+1, curr);
            curr.remove(curr.size()-1);
        }
    }
}