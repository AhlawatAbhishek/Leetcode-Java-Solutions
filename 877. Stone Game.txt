class Solution {
    public boolean stoneGame(int[] piles) {
        int n = piles.length;
        long totalStones = 0;
        for(int i : piles){
            totalStones += i;
        }
         // int AlixsPoints = countAlixPoints(piles, 0, n-1, n, totalStones);
        long dp[][] = new long[n][n];
		for (int g = 0; g < n; g++) {
			for (int i = 0, j = g; j < n; i++, j++) {
				if (g == 0)
					dp[i][j] = piles[i];
				else if (g == 1)
					dp[i][j] = Math.max(piles[i], piles[j]);
				else {
					long val1 = piles[i] + Math.min(dp[i + 2][j], dp[i + 1][j - 1]);
					long val2 = piles[j] + Math.min(dp[i + 1][j - 1], dp[i][j - 2]);
					dp[i][j] = Math.max(val1, val2);
				}
			}
		}

		 long AlixsPoints = dp[0][n - 1];;
        if(AlixsPoints > totalStones/2) return true;
        else return false;
    }
    public int countAlixPoints(int piles[], int ai, int bi, int n, int totalStones){
        if(ai >= bi) return 0;
        int alixPoints = Math.max(totalStones-countAlixPoints(piles, ai+1, bi, n, totalStones-piles[ai]), totalStones-countAlixPoints(piles, ai, bi-1, n, totalStones-piles[bi]));
        return alixPoints;
    }
}