class Solution {
    public int longestConsecutive(int[] nums) {
      Set<Integer> set = new HashSet<>();
      for(int num : nums){
          set.add(num);
      }  
      int res = 0;
      while(!set.isEmpty()){
          int x = set.iterator().next();
          set.remove(x);
          int lowerBound =  x -1;
          while(set.contains(lowerBound)){
              set.remove(lowerBound);
              lowerBound--;
          }
          int upperBound  = x +1;
          while(set.contains(upperBound)){
              set.remove(upperBound);
              upperBound++;
          }
          res = Math.max(res, upperBound - lowerBound -1);
      }  
      return res;
    }
}
------------------------------
class Solution {
    public int longestConsecutive(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        Set<Integer> set = new HashSet<>();
        for(int i : nums){
            set.add(i);
        }
        Iterator<Integer> it = set.iterator();
        int j = 0;
        int res[] = new int[set.size()];
        while(it.hasNext()){
            res[j++] = it.next();
        }
        Arrays.sort(res);
        int maxLen = 1, count = 1;
        for(int i = 0 ; i<res.length-1; i++){
            if(res[i] + 1 == res[i+1] ){
                count++;
            }else{
                maxLen = Math.max(maxLen, count);
                count = 1;
            }
            maxLen = Math.max(maxLen, count);
        }
        return maxLen;
    }
}