class Solution {
    public List<Integer> powerfulIntegers(int x, int y, int bound) {
        List<Integer> powx = new ArrayList<Integer>();
        List<Integer> powy = new ArrayList<Integer>();
        int px = x, py = y;
        powx.add(1);
        powy.add(1);
       if(x != 1){ 
        while(bound >= px){
            powx.add(px);
            px = px * x;
        }
       }
       if(y != 1){ 
        while(bound >= py){
            powy.add(py);
            py = py * y;
        }
       }    
        Set<Integer> set = new HashSet<Integer>();
        for(int i : powx){
            for(int j : powy){
               if((i+j) <= bound)set.add((i+j)); 
            }
        }
        // return set.toList();
        // return Collections.toList(set);
        return set.stream().collect(Collectors.toList());
    }
}