class Solution {
    public List<Integer> sequentialDigits(int low, int high) {
      List<Integer> al = new ArrayList<>();
      for(int i = low; i<=high; i++){
          if(isValid(i)){
              al.add(i);
          }
      }   
      Collections.sort(al);
      return al;  
    }
    public boolean isValid(int y){
        String str = Integer.toString(y);
        for(int i = 1; i<str.length(); i++){
            char ch = str.charAt(i);
            char ch1 = str.charAt(i-1);
            int x = Integer.parseInt(ch+"");
            int x1 = Integer.parseInt(ch1+"");
            if(x1 + 1 == x){
                continue;
            }else{
                return false;
            }
        }
        return true;
    }
}---------------------
correction solution that doesn't give tle on large input::::::::
class Solution {
    public List<Integer> sequentialDigits(int low, int high) {
        
        List<Integer> list = new ArrayList<>();
        
        for(int i=1;i<9;i++) {
            
            int next = 0;
            
            for(int j=i;j<10;j++) {
                next = next*10+j;
                if(next>=low && next<=high) {
                    list.add(next);
                } else if(next>high) {
                    break;
                }
            }
            
        }
        
        Collections.sort(list);
        
        return list;
        
    }
}            
-------------------------------TLE----
class Solution {
    public List<Integer> sequentialDigits(int low, int high) {
        List<Integer> res = new ArrayList<>();
        for(int num = low; num<=high; num++){
            if(hvSeq(num)){
                res.add(num);
            }
        }
        return res;
    }
    private boolean hvSeq(int num){
        int lastDig = num % 10;
        num /= 10;
        while(num > 0){
            int currDig = num % 10;
            if(!(lastDig-1 == currDig)){
                return false;
            }
            lastDig = currDig;
            num /= 10;
        }
        return true;
    }
}
----------------------------------------
class Solution {
    public List<Integer> sequentialDigits(int low, int high) {
        String str = "123456789";
        List<Integer> res = new ArrayList<>();
        for(int len = getLen(low); len<=getLen(high); len++){
            for(int indx = 0; indx<=9 - len; indx++){
                String n = str.substring(indx, indx+len);
                Integer num = Integer.parseInt(n);
                if(num >= low && num <= high){
                    res.add(num);
                }
            }
        }
        return res;
    }
    private int getLen(int num){
        int len = 0;
        while(num > 0){
            len++;
            num /= 10;
        }
        return len;
    }
}