class Solution {
     static HashMap<Integer, int[]> dirMap = new HashMap<>();
      static{ 
        dirMap.put(0, new int[]{-1, 0});
        dirMap.put(1, new int[]{0, 1});
        dirMap.put(2, new int[]{1, 0});
        dirMap.put(3, new int[]{0, -1});
        dirMap.put(-1, new int[]{0, -1});
        dirMap.put(-2, new int[]{1, 0});
        dirMap.put(-3, new int[]{0, 1});
      }  
     public boolean isRobotBounded(String instructions) {
        int dir = 0, r = 0, c=0;
        for(char i : instructions.toCharArray()){
            if(i == 'L'){
                dir--;
                if(dir == -4)dir = 0;
            }else if(i == 'R'){
                dir++;
                if(dir == 4)dir = 0;
            }else{
                int dirs[] = dirMap.get(dir);
                r += dirs[0];
                c += dirs[1];
            }
        }
        if((r == 0 && c == 0)||dir != 0)return true;
        return false;
        
    }
}
-----------------------------
class Solution {
    //N = 0, S = 2, E = 1, W = 3;
    public boolean isRobotBounded(String instructions) {
        
        char path[] = instructions.toCharArray();
        int x = 0, y = 0, dir = 0;
        int count = 4;
        while(count-->0){
             for(int i = 0; i < path.length; i++){
                char move = path[i];
                if(move == 'R'){
                dir = (dir+1)%4;
             }else if(move == 'L'){
                dir = (4 + dir - 1)%4;
             }else{
                  if(dir == 0){
                    y++;
                  }else if(dir == 1){
                    x++;
                  }else if(dir == 2){
                    y--;
                  }else if(dir == 3){
                    x--;
                  }
             }
          }
          if(x == 0 && y == 0)return true;
          
        }
       return false;
    }    
}