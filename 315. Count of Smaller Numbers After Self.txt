class Solution {
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> li = new ArrayList<>();
        if(nums.length == 1){
            li.add(0);
            return li;
        }
        Queue<Integer> queue = new PriorityQueue<>((a,b) -> b -a);
        int n = nums.length;
        queue.offer(nums[n-1]);
        li.add(0);
        for(int i = n-2; i>= 0; i--){
            int n1 = nums[i];
            Iterator<Integer> it = queue.iterator();
            int count = 0;
            while(it.hasNext()){
                int x = it.next();
                if(x < n1){
                    break;
                }
                count++;
            }
            li.add(queue.size() - count);
            queue.offer(n1);
         }
        Collections.reverse(li);
        return li;
    }
}
-----------------------
class SegmentTreeNode{
    SegmentTreeNode left, right;
    int start, end, sum;
    SegmentTreeNode(int start, int end){
        this.start = start;
        this.end = end;
        this.sum = 0;
        left = right = null;
    }
}
class Solution {
    public SegmentTreeNode buildTree(int start, int end){
        if(start > end){
            return null;
        }
        if(start == end){
            return new SegmentTreeNode(start, start);
        }
        SegmentTreeNode root = new SegmentTreeNode(start, end);
        int mid = start + (end - start)/2;
        root.left = buildTree(start, mid);
        root.right = buildTree(mid+1, end);
        // root.sum = (root.left != null ? root.left.sum : 0)+ (root.right != null ? root.right.sum : 0);
        return root;
        
    }
    public List<Integer> countSmaller(int[] nums) {
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        for(int i : nums){
            max = Math.max(max, i);
            min = Math.min(min, i);
        }
        SegmentTreeNode root = buildTree(min, max);
        List<Integer> res = new ArrayList<>();
        for(int i = nums.length-1; i>= 0; i--){
            int n = nums[i];
            update(root, n);
            res.add(query(root, min, n-1));
        }
        Collections.reverse(res);
        return res;
    }
    
    public void update(SegmentTreeNode root, int n){
        // if(root.start > n || root.end < n){
        //     return;
        // }
        if(root == null){
            return;
        }
        if(root.start==n && root.end== n){
            root.sum += 1;
            return;
        }
        int mid = root.start + (root.end - root.start)/2;
        if(mid >= n){
            update(root.left, n);
        }else{
            update(root.right, n);
        }
        root.sum = (root.left != null ? root.left.sum : 0)+ (root.right != null ? root.right.sum : 0);
    }
     
    public int query(SegmentTreeNode root, int start, int end){
        if (root == null || start >end) {
      return 0;
    }

    if (root.start == start && root.end == end) {
      return root.sum;
    }
    int mid = root.start + (root.end - root.start) / 2;
    if (end <= mid) {
      return query(root.left, start, end);
    }
    else if (start > mid) {
      return query(root.right, start, end);
    }
    return query(root.left, start, mid) + SumRange(root.right, mid + 1, end);
    }
}