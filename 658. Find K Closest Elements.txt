class Pair{
    int num;
    int diff;
    Pair(int n, int d){
        num = n;
        diff = d;
    }
}
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        PriorityQueue<Pair> queue = new PriorityQueue<>((a, b)->{
        if(a.diff == b.diff){
            return a.num - b.num;
        }else{
           return a.diff - b.diff;
        }    
        });
        for(int i : arr){
            queue.offer(new Pair(i, Math.abs(x - i)));
        }
        List<Integer> res = new ArrayList<>();
        for(int i = 0; i<k; i++){
            res.add(queue.poll().num);
        }
        Collections.sort(res);
        return res;
    }
}
------------------------------------------
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int start = 0;
        for(int i = k; i<arr.length; i++){
           if(arr[start] == arr[i] || (x-arr[start]) > (arr[i] - x)) start++;
           else break; 
        }
        List<Integer> res = new ArrayList<>();
        for(int i = 0; i<k; i++){
            res.add(arr[start++]);
        }
        // Collections.sort(res);
        return res;
    }
}
-----------------------------------
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int start = 0, n = arr.length, end = n-k;
        while(start < end){
            int mid = start + (end - start)/2;
            if((x-arr[mid]) > (arr[mid+k] - x)){
                start = mid+1;
            }else{
                end = mid;
            }
        }
        List<Integer> res = new ArrayList<>();
        for(int i = start; i<start+k; i++){
            res.add(arr[i]);
        }
        // Collections.sort(res);
        return res;
    }
}