Intuition .Since the array is sorted and rotated thus we can still use binary search
    .Now the question comes how to make decision in which direction to move based on 
      what decission.
    .if mid is greater than hi than we are in rotated part of the array thus min
      should be in the right part
    .else move to the left part of the array to find min
    
// Time complexity : O(N) due to edge cases like below and O(logN) other wise since we are using binary search.
// Auxiliary Space: O(1)
class Solution {
    public int findMin(int[] arr) {
        int n = arr.length, lo = 0, hi = n-1;
//         handels edge cases like 3 3 3 3 1 3 3
        while(lo != hi && arr[lo] == arr[hi]){
            hi--;
        }
        while(lo < hi){
            int mid = lo+(hi-lo)/2;
// if we are in the rotated par like 0 1 4 4 5 6 7 -> 4 5 6 7 0 1 4
//                                                          ^    
           if(arr[mid] > arr[hi]){
                lo = mid+1;
            }else{
                hi = mid;
            }
        }
        return arr[lo];
    }
}