------------------------------TLE------------------------
class Solution {
    public int maxResult(int[] nums, int k) {
        return maxResult(nums, k, 0);
    }
    int maxResult(int []nums, int k, int i) {
	  if(i >= nums.length - 1) return nums[nums.length -1];
	  int score = Integer.MIN_VALUE;
	  for(int j = 1; j <= k; j++) 
	    	score = Math.max(score, nums[i] + maxResult(nums, k, i + j));
	  return score;
    }
}
---------------------------------------Correct--------------------------------
class Solution {
    public int maxResult(int[] nums, int k) {
       Queue<int[]>  queue = new PriorityQueue<>((a, b) -> b[0] - a[0]);
        queue.offer(new int[]{nums[0], 0});
        int maxScore = nums[0];
        for(int i = 1; i<nums.length; i++){
            while(!(i-queue.peek()[1] <= k)){
                queue.poll();
            }
            maxScore = queue.peek()[0] + nums[i];
            queue.offer(new int[]{maxScore , i});
            
        }
        return maxScore;
    }
}