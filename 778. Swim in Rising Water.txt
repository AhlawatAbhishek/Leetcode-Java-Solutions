class Solution {
    public int swimInWater(int[][] grid) {
        int lo = 0, hi = Integer.MAX_VALUE, minTime = 0;
        while(lo<=hi){
            int mid = lo + (hi - lo)/2;
            boolean visited[][] = new boolean[grid.length][grid[0].length];
            findPath(grid, 0, 0, mid, visited);
            if(visited[grid.length-1][grid.length-1]){
                minTime = mid;
                hi = mid-1;
            }else{
                lo = mid+1;
            }
        }
       
        return minTime;
    }
    public void findPath(int [][]grid, int row, int col, int time, boolean[][]visited){
        if(isSafe(grid, row, col, visited, time)){

            visited[row][col] = true;
            if(row == grid.length-1 && col == grid[0].length-1){
                return;
            } 

           findPath(grid, row, col+1,  time, visited);
        
           findPath(grid, row+1, col,  time, visited);

           findPath(grid, row-1, col,  time, visited);
    
           findPath(grid, row, col-1,  time, visited);
 
        }
        return;
    }
    public boolean isSafe(int [][]grid, int row, int col, boolean[][]visited, int t){
        if(row < 0 || col <0 || row>=grid.length || col >= grid[0].length || visited[row][col] == true || t < grid[row][col]){
            return false;
        }
        return true;
    }
}
----------------------------------------------------------
Dijkistra-------shortest path-----
class Tile{
    int x, y, time;
    Tile(int x1, int y1, int t){
        x = x1;
        y = y1;
        time = t;
    }
}
class Solution {
    int dir[][] = {{1, 0},{0,1},{-1,0},{0, -1}};
    public int swimInWater(int[][] grid) {
        Queue<Tile> queue = new PriorityQueue<>((a, b)->a.time - b.time);
        boolean visited[][] = new boolean[grid.length][grid[0].length];
        int minTime = grid[0][0];
        visited[0][0] = true;
        queue.offer(new Tile(0, 0, grid[0][0]));
        while(!queue.isEmpty()){
            Tile t = queue.poll();
       
            minTime = Math.max(minTime, t.time);
            if(t.x == grid.length-1 && t.y== grid[0].length-1){
                break;
            }
            for(int d[] : dir){
                int xNew = t.x + d[0];
                int yNew = t.y + d[1];
               if(isSafe(grid, xNew, yNew, visited)){
                   queue.offer(new Tile(xNew, yNew, grid[xNew][yNew]));
                        visited[xNew][yNew] = true;
               }
            }
        }
       
        return minTime;
    }
    public boolean isSafe(int [][]grid, int row, int col, boolean[][]visited){
        if(row < 0 || col <0 || row>=grid.length || col >= grid[0].length || visited[row][col] == true){
            return false;
        }
        return true;
    }
}