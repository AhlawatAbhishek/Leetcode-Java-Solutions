class Solution {
   class TrieNode{
    TrieNode children[];
    boolean isEnd;
    StringBuilder word;
     TrieNode(){
         children = new TrieNode[27];
         isEnd = false;
         word = null;
     }  
    }
    private TrieNode root = new TrieNode();
    public List<String> removeSubfolders(String[] folder) {
        for(String s : folder){
            addWord(s);
        }
        List<String> res = new ArrayList<>();
        populateList(res, "", root);
        return res;
    }
    private void populateList(List<String> res, String str, TrieNode curr){
        if(curr == null) return;
        if(curr.isEnd){
            res.add(curr.word.toString());
        }
        for(int indx = 0; indx<27; indx++){
            if(curr.children[indx] != null){
                populateList(res, str, curr.children[indx]);
            }
        }
    }
    private void addWord(String key){
        TrieNode curr = root;
        int len = key.length();
        for(int indx = 0; indx<len; indx++){
            char c = key.charAt(indx);
            int ind = c == '/' ? 26 : c - 'a';
            if(curr.isEnd == true && indx != len-1 && key.charAt(indx) =='/'){
                return;
            }
            if(curr.children[ind] == null){
                curr.children[ind] = new TrieNode();
            }
            curr = curr.children[ind];
        }
        curr.isEnd = true;
        curr.word = new StringBuilder(key);
        curr.children[26] = null;
    }
}
--------------------------------------------------------------
class Solution {
    static class TrieNode{
        boolean word = false;
        TrieNode[] children = new TrieNode[27];
    }
    TrieNode root = new TrieNode();
    
    private boolean add(String s){
        TrieNode current = root;
        for(int i=0;i<s.length();i++){
            int charIndex =  s.charAt(i)=='/'?26:s.charAt(i)-'a';
            TrieNode child = current.children[charIndex];
            if(child==null){
                current.children[charIndex] = new TrieNode();
                current = current.children[charIndex];
            }
            else if(child.word && (i+1==s.length() || s.charAt(i+1)=='/')){
                return false;
            }
            else{
                current = child;
            }
        }
        current.word = true;
        return true;
    }
    
    public List<String> removeSubfolders(String[] folder) {
        Map<Integer,List<String>> lengthToWords = new HashMap<>();
        for(String f:folder){
            lengthToWords.computeIfAbsent(f.length(),k->new LinkedList<>())
                .add(f);
        }
        List<String> result = new LinkedList<>();
        for(int i=2;i<=100;i++){
            for(String word:lengthToWords.getOrDefault(i,Collections.emptyList())){
                if(add(word)){
                    result.add(word);
                }
            }
        }
        return result;
    }
    
    
}
---------------------------------------------------------------
class Solution {
    static class TrieNode{
        boolean word = false;
        TrieNode[] children = new TrieNode[27];
    }
    TrieNode root = new TrieNode();
    
    private boolean add(String s){
        TrieNode current = root;
        for(int i=0;i<s.length();i++){
            int charIndex =  s.charAt(i)=='/'?26:s.charAt(i)-'a';
            TrieNode child = current.children[charIndex];
            if(child==null){
                current.children[charIndex] = new TrieNode();
                current = current.children[charIndex];
            }
            else if(child.word && (i+1==s.length() || s.charAt(i+1)=='/')){
                return false;
            }
            else{
                current = child;
            }
        }
        current.word = true;
        return true;
    }
    
    public List<String> removeSubfolders(String[] folder) {
        Map<Integer,List<String>> lengthToWords = new HashMap<>();
        for(String f:folder){
            lengthToWords.computeIfAbsent(f.length(),k->new LinkedList<>())
                .add(f);
        }
        List<String> result = new LinkedList<>();
        for(int i=2;i<=100;i++){
            for(String word:lengthToWords.getOrDefault(i,Collections.emptyList())){
                if(add(word)){
                    result.add(word);
                }
            }
        }
        return result;
    }
    
    
}