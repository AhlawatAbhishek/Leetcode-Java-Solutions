class MyCircularQueue {
   int arr[] = null;
   int front = -1, rear = -1; 
    public MyCircularQueue(int k) {
        arr = new int[k];
        Arrays.fill(arr, -1);
    }
    
    public boolean enQueue(int value) {
        if(this.isFull()){
            return false;
        }
      if(this.front != -1 && this.rear != -1){
         this.rear = (this.rear+1) % this.arr.length;
        int indx = this.rear % this.arr.length;
        this.arr[indx] = value;
       }else{
        this.front = (this.front+1) % this.arr.length;
        this.rear = (this.rear+1) % this.arr.length;
        int indx = this.rear % this.arr.length;
        this.arr[indx] = value;
      }         
        return true;
    }
    
    public boolean deQueue() {
        if(this.isEmpty()){
            return false;
        }
        int item = arr[this.front % arr.length];
        arr[this.front % arr.length] = -1;
        this.front = (this.front +1) % arr.length;
        return true;
    }
    
    public int Front() {
        if(!this.isEmpty())return arr[this.front% arr.length];
        return -1;
    }
    
    public int Rear() {
        if(!this.isEmpty())return arr[this.rear % arr.length];
        return -1;
    }
    
    public boolean isEmpty() {
       for(int i  : this.arr){ 
        if(i != -1){
            return false;
        }
       }    
        return true;
    }
    
    public boolean isFull() {
        int indx = (this.rear+1)%arr.length;
        return arr[indx] != -1;  
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
-------------------------------
class MyCircularQueue {
    int F;
    int R;
    boolean noElPresent;
    int[] cqueue = null;

    public MyCircularQueue(int k) {
        this.cqueue = new int[k];
        this.noElPresent  = true;
        this.F = 0;
        this.R = 0;

    }
    //O(1)
    public boolean enQueue(int value) {
        if(this.isFull()){
            return false;
        } else{
            this.noElPresent = false;
            cqueue[R]  =value;
            R = (R+1) % cqueue.length;
            return true;
        }
    }
    // O(1)
    public boolean deQueue() {
        if(this.isEmpty()){
            return false;
        } else{
            F = (F+1) % cqueue.length;
            if(R==F){
                this.noElPresent = true;
            }
            return true;
        }
    }

    // O(1)
    public int Front() {
        if(this.isEmpty()){
            return -1;
        } else{
            return cqueue[F];
        }
    }

    // O(1)
    public int Rear() {
        if(this.isEmpty()){
            return -1;
        } else{
            if(R == 0){
                return cqueue[cqueue.length-1];
            } else{
                return cqueue[R-1];
            }
        }
    }

    // O(1)
    public boolean isEmpty() {
        return this.noElPresent;
    }

    // O(1)
    public boolean isFull() {
        return F==R && !this.isEmpty();// F ==R && !this.noElPresent
    }
}