class Solution {
    class TrieNode{
        TrieNode [] children;
        String word;
        public TrieNode(){
            children = new TrieNode[26];
            word = null;
        }
    }
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();
        if(board == null||board.length == 0){
            return res;
        }
        TrieNode root = new TrieNode();
        buildTrie(root, words);
        
        for(int i = 0; i<board.length; i++){
            for(int j = 0; j<board[0].length;j++){
                char c = board[i][j];
                if(root.children[c -'a'] != null){
                    dfs(board, i, j, root, res);
                }
            }
        }
        return res;
    }
    private void dfs(char[][] board, int i, int j, TrieNode cur, List<String> res){
        if(i<0 || j<0 || i > board.length -1 || j  > board[0].length -1){
            return;
        }    
        if(board[i][j] == '#'){
            return;
        }
        char c = board[i][j];
        if(cur.children[c - 'a'] == null)return;
        cur = cur.children[c - 'a'];
        if(cur.word != null){
            res.add(cur.word);
            cur.word = null;
        }
        board[i][j] = '#';
        dfs(board, i + 1, j, cur, res);
        dfs(board, i -1, j, cur, res);
        dfs(board, i, j+1, cur, res);
        dfs(board, i, j-1, cur, res);
        board[i][j] = c; 
    }
    private void buildTrie(TrieNode root, String[] words)
    {
        for(String s : words){
            TrieNode curr = root;
            for(char c : s.toCharArray()){
                int index = (int) (c - 'a');
                if(curr.children[index] == null){
                    curr.children[index] = new TrieNode();
                }
                curr = curr.children[index];
            }
            curr.word = s;
        }
       
    
    }    
}
--------------------------------------------
class Solution {
    class TrieNode{
        TrieNode children[] = null;
        boolean isEnd;
        int nodeCount = 0;
        TrieNode(){
            children = new TrieNode[26];
            isEnd = false;
        }
    }
    private TrieNode root = null;
    private void addWord(String word){
        TrieNode curr = root;
        for(char c : word.toCharArray()){
            c -= 'a';
            if(curr.children[c] == null){
                curr.children[c] = new TrieNode();
            }
            curr.nodeCount++;
            curr = curr.children[c];
        }
        curr.isEnd = true;
    }
    private void remove(String word){
        TrieNode curr = root;
        for(char c : word.toCharArray()){
            c -= 'a';
            curr.nodeCount--;
            TrieNode next = curr.children[c];
            if(curr.nodeCount == 0){
              curr.children[c] = new TrieNode();   
            }
            curr = next;
        }
        curr.isEnd = false;
    }
    int row = 0, col = 0;
    public List<String> findWords(char[][] board, String[] words) {
        row = board.length;
        col = board[0].length;
        List<String> res = new ArrayList<>();
        root = new TrieNode();
        char currWord[] = new char[12];
        for(String s : words) addWord(s);
        // if(root.children[0] != null){
        //     System.out.println("Word is present");
        //     System.out.println(root.children[0].isEnd);
        // }
        for(int r = 0; r<row; r++){
            for(int c = 0; c<col; c++){
                dfs(board, r, c, root, res, currWord, 0);
            }
        }
        return res;
    }
    private void dfs(char[][] board, int r, int c, TrieNode root, List<String> res, char currWord[], int indx){
            if(root == null) return;  
        if(root.isEnd){
            String curr = new String(currWord, 0, indx);
            // System.out.println(curr);
            res.add(curr);
            remove(curr);
        }
        if(r < 0 || c < 0 || r >= row || c >= col || board[r][c] == '.'){
            return;
        }
    
        char temp = board[r][c];
        board[r][c] = '.';
        currWord[indx] = temp;
        root = root.children[temp - 'a'];
        dfs(board, r+1, c, root, res, currWord, indx+1);
        dfs(board, r, c+1, root, res, currWord, indx+1);
        dfs(board, r, c-1, root, res, currWord, indx+1);
        dfs(board, r-1, c, root, res, currWord, indx+1);
        board[r][c] =  temp;
    }
}