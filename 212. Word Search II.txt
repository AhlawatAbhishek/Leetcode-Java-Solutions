class Solution {
    class TrieNode{
        TrieNode [] children;
        String word;
        public TrieNode(){
            children = new TrieNode[26];
            word = null;
        }
    }
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();
        if(board == null||board.length == 0){
            return res;
        }
        TrieNode root = new TrieNode();
        buildTrie(root, words);
        
        for(int i = 0; i<board.length; i++){
            for(int j = 0; j<board[0].length;j++){
                char c = board[i][j];
                if(root.children[c -'a'] != null){
                    dfs(board, i, j, root, res);
                }
            }
        }
        return res;
    }
    private void dfs(char[][] board, int i, int j, TrieNode cur, List<String> res){
        if(i<0 || j<0 || i > board.length -1 || j  > board[0].length -1){
            return;
        }    
        if(board[i][j] == '#'){
            return;
        }
        char c = board[i][j];
        if(cur.children[c - 'a'] == null)return;
        cur = cur.children[c - 'a'];
        if(cur.word != null){
            res.add(cur.word);
            cur.word = null;
        }
        board[i][j] = '#';
        dfs(board, i + 1, j, cur, res);
        dfs(board, i -1, j, cur, res);
        dfs(board, i, j+1, cur, res);
        dfs(board, i, j-1, cur, res);
        board[i][j] = c; 
    }
    private void buildTrie(TrieNode root, String[] words)
    {
        for(String s : words){
            TrieNode curr = root;
            for(char c : s.toCharArray()){
                int index = (int) (c - 'a');
                if(curr.children[index] == null){
                    curr.children[index] = new TrieNode();
                }
                curr = curr.children[index];
            }
            curr.word = s;
        }
       
    
    }    
}
--------------------------------------------
class Solution {
    class TrieNode{
        TrieNode children[] = null;
        boolean isEnd;
        int nodeCount = 0;
        TrieNode(){
            children = new TrieNode[26];
            isEnd = false;
        }
    }
    private TrieNode root = null;
    private void addWord(String word){
        TrieNode curr = root;
        for(char c : word.toCharArray()){
            c -= 'a';
            if(curr.children[c] == null){
                curr.children[c] = new TrieNode();
            }
            curr.nodeCount++;
            curr = curr.children[c];
        }
        curr.isEnd = true;
    }
    private void remove(String word){
        TrieNode curr = root;
        for(char c : word.toCharArray()){
            c -= 'a';
            curr.nodeCount--;
            TrieNode next = curr.children[c];
            if(curr.nodeCount == 0){
              curr.children[c] = new TrieNode();   
            }
            curr = next;
        }
        curr.isEnd = false;
    }
    int row = 0, col = 0;
    public List<String> findWords(char[][] board, String[] words) {
        row = board.length;
        col = board[0].length;
        List<String> res = new ArrayList<>();
        root = new TrieNode();
        char currWord[] = new char[12];
        for(String s : words) addWord(s);
        // if(root.children[0] != null){
        //     System.out.println("Word is present");
        //     System.out.println(root.children[0].isEnd);
        // }
        for(int r = 0; r<row; r++){
            for(int c = 0; c<col; c++){
                dfs(board, r, c, root, res, currWord, 0);
            }
        }
        return res;
    }
    private void dfs(char[][] board, int r, int c, TrieNode root, List<String> res, char currWord[], int indx){
            if(root == null) return;  
        if(root.isEnd){
            String curr = new String(currWord, 0, indx);
            // System.out.println(curr);
            res.add(curr);
            remove(curr);
        }
        if(r < 0 || c < 0 || r >= row || c >= col || board[r][c] == '.'){
            return;
        }
    
        char temp = board[r][c];
        board[r][c] = '.';
        currWord[indx] = temp;
        root = root.children[temp - 'a'];
        dfs(board, r+1, c, root, res, currWord, indx+1);
        dfs(board, r, c+1, root, res, currWord, indx+1);
        dfs(board, r, c-1, root, res, currWord, indx+1);
        dfs(board, r-1, c, root, res, currWord, indx+1);
        board[r][c] =  temp;
    }
}
----------------------c++---------------------------------
#include <bits/stdc++.h>
//#include<fstream>

using namespace std;
////////////////Macros and global const/////////////////////////////////////
#define ar array
#define ll long long
#define ld long double
#define sza(x) ((int)x.size())
#define all(a) (a).begin(), (a).end()
#define pii pair<int, int>
#define pll pair<ll, ll>
#define Vc vector
#define pb push_back
#define ppb pop_back
#define ff first
#define ss second
#define nl "\n"
#define lb lower_bound
#define ub upper_bound
#define fo(i, a, b) for (ll i = a; i < b; i++)
#define rFo(i, b, a) for (ll i = b; i >= a; i--)

const ll MAX = 1e10;
const ll MOD = 1e9 + 7;
const ll INF = 1e9;
const ld EPS = 1e-9;
//////////////////Debug Template//////////////////////////////////////
void __print(int x) { cerr << x; }
void __print(long x) { cerr << x; }
void __print(long long x) { cerr << x; }
void __print(unsigned x) { cerr << x; }
void __print(unsigned long x) { cerr << x; }
void __print(unsigned long long x) { cerr << x; }
void __print(float x) { cerr << x; }
void __print(double x) { cerr << x; }
void __print(long double x) { cerr << x; }
void __print(char x) { cerr << '\'' << x << '\''; }
void __print(const char *x) { cerr << '\"' << x << '\"'; }
void __print(const string &x) { cerr << '\"' << x << '\"'; }
void __print(bool x) { cerr << (x ? "true" : "false"); }

template <typename T, typename V>
void __print(const pair<T, V> &x);
template <typename T>
void __print(const T &x)
{
    int f = 0;
    cerr << '{';
    for (auto &i : x)
        cerr << (f++ ? ", " : ""), __print(i);
    cerr << "}";
}
template <typename T, typename V>
void __print(const pair<T, V> &x)
{
    cerr << '{';
    __print(x.first);
    cerr << ", ";
    __print(x.second);
    cerr << '}';
}
void _print() { cerr << "]\n"; }
template <typename T, typename... V>
void _print(T t, V... v)
{
    __print(t);
    if (sizeof...(v))
        cerr << ", ";
    _print(v...);
}
#ifdef DEBUG
#define dbg(x...)                                                             \
    cerr << "\e[91m" << __func__ << ":" << __LINE__ << " [" << #x << "] = ["; \
    _print(x);                                                                \
    cerr << "\e[39m" << endl;
#else
#define dbg(x...)
#endif
///////////////////////////Debug template ends//////////////
const int ALPHABET_SIZE = 26;
struct TrieNode
{
    struct TrieNode *children[ALPHABET_SIZE];

    bool isEndOfWord;
};

struct TrieNode *getNode(void)
{
    struct TrieNode *pNode = new TrieNode;

    pNode->isEndOfWord = false;

    for (int i = 0; i < ALPHABET_SIZE; i++)
        pNode->children[i] = NULL;

    return pNode;
}

void insert(struct TrieNode *root, string key)
{
    struct TrieNode *pCrawl = root;

    for (int i = 0; i < key.length(); i++)
    {
        int index = key[i] - 'a';
        if (!pCrawl->children[index])
            pCrawl->children[index] = getNode();

        pCrawl = pCrawl->children[index];
    }

    pCrawl->isEndOfWord = true;
}

bool search(struct TrieNode *root, string key)
{
    struct TrieNode *pCrawl = root;

    for (int i = 0; i < key.length(); i++)
    {
        int index = key[i] - 'a';
        if (!pCrawl->children[index])
            return false;

        pCrawl = pCrawl->children[index];
    }

    return (pCrawl != NULL && pCrawl->isEndOfWord);
}
class Solution
{
public:
    struct TrieNode *rut = getNode();
    unordered_set<string> sett;
    int dirs[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    void dfs(vector<vector<char>> &board, int r, int c, string s, struct TrieNode *rut)
    {
        if (rut == NULL || r >= sza(board) || c >= sza(board[0]) || r < 0 || c < 0 || board[r][c] == 'A')
        {
            return;
        }

        char temp = board[r][c];
        rut = rut->children[temp - 'a'];
        if(rut == NULL)return;
        s += temp;
        if (rut->isEndOfWord)
        {
            sett.insert(s);
        }
        board[r][c] = 'A';
        for (auto dir : dirs)
        {
            int x = r + dir[0], y = c + dir[1];
            // if (rut == NULL || x >= sza(board) || y >= sza(board[0]) || x < 0 || y < 0 || board[r][c] == 'A')
            dfs(board, x, y, s, rut);
        }
        board[r][c] = temp;
    }
    vector<string> findWords(vector<vector<char>> &board, vector<string> &words)
    {
        for (auto word : words)
        {
            insert(rut, word);
        }
        // int cnt = 0;
        fo(r, 0, sza(board))
        {
            fo(c, 0, sza(board[0]))
            {
                // cnt++;
                dfs(board, r, c, "", rut);
            }
        }
        Vc<string> res;
        // cout<<"set size is: "<<sza(sett)<<nl;
        // cout<<cnt<<nl;
        for (auto str : sett)
        {
            res.pb(str);
        }
        return res;
    }
};