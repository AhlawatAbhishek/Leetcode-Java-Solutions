/**
Intuition: . "It will automatically contact the police if two directly-linked houses
              were broken into on the same night." This constraint is the crux of the
              question.
          .For each node(house) we have two choices:
             1. choose to rob the node and ignore its immediate children.
             2. choose to rob its immediate children and ignore it.
//Time complexity: O(h), h is height of binary tree
//Spacec complexity: O(h), for recursion call stack , h can be = n, number of nodes in
//tree in case of a skewed binary tree                 
class Solution {
    public int rob(TreeNode root) {
        int []result = robHelper(root);
        return Math.max(result[0], result[1]);
    }
    //DFS fashioned helper.
    public int[] robHelper(TreeNode node){
        if(node == null){
            return new int[2];
        }
        int left[] = robHelper(node.left);
        int right[] = robHelper(node.right);
        int result[] = new int[2];
  //Two choices      
        result[0] = node.val + left[1] + right[1]; //root rob and skip immediate children
        result[1] = Math.max(left[0], left[1]) + Math.max(right[0] , right[1]);
        return result;
    }
}
--------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int rob(TreeNode root) {
        if(root.left == null && root.right == null) return root.val;
        ArrayList<Integer> levels = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            int lvlSum = 0;
            while(size-->0){
                TreeNode n = queue.poll();
                lvlSum += n.val;
                if(n.left != null) queue.offer(n.left);
                if(n.right != null) queue.offer(n.right);
            }
            levels.add(lvlSum);
        }
        int money[] = new int[levels.size()], len = money.length;
//for single houes there is only one option
        money[0] = levels.get(0);
//for two houses take max of them as looting both houses will raise alarm        
        money[1]= Math.max(levels.get(0), levels.get(1));
        for(int indx = 2; indx<len; indx++){
//see the intuition for this            
            money[indx] = Math.max(levels.get(indx)+money[indx-2], money[indx-1]);
        }
//at last return the total maximum loot robber can make        
        return money[len-1];
    }
}