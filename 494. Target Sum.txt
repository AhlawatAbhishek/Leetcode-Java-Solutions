class Solution {///own solution
    public int findTargetSumWays(int[] nums, int S) {
        return ways(nums, S, 0, 0);
    }
    public int ways(int nums[], int target, int sum, int index){
        if(index >= nums.length){
            if(sum == target){
                return 1;
            }else{
                return 0;
            }            
        }
        int plus = 0, minus = 0;
        plus += ways(nums, target, sum + nums[index], index + 1);
        minus += ways(nums, target, sum - nums[index], index + 1);
        return (plus + minus);
    }
}
--------------------------------
class Solution {
    public int findTargetSumWays(int[] nums, int S) {
        int sum = 0;
        for(int n : nums){
            sum += n;
        }
        return S > sum || (sum + S) % 2 > 0 ? 0 : subsetSum(nums, (S + sum) >>> 1);       
    }
   private int subsetSum(int[] nums, int S){
       int []arr = new int[S+1];
       arr[0] = 1;
       for(int n : nums){
           for(int i = S ; i >= n; i--){
               arr[i] += arr[i - n];
           }
       }
       return arr[S];
   }
}