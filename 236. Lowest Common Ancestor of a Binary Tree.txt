//Apna Solution
------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null){
            return null;
        }
        if(root.val == p.val || root.val == q.val){
            return root;
        }
        TreeNode lLca = lowestCommonAncestor(root.left, p, q);
        TreeNode rLca = lowestCommonAncestor(root.right, p, q);
        if(lLca == null&& rLca != null){
            return rLca;
        }else if(rLca == null && lLca != null){
            return lLca;
        }else if(lLca != null && rLca != null){
            return root;
        }
        return null;
    }
}
----------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q){
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left, p , q);
        TreeNode right = lowestCommonAncestor(root.right, p , q);
        if(left != null && right != null){
            return root;
        }    
        return left != null ? left : right;             
    }
}