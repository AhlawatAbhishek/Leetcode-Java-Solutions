/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> result = new ArrayList<>();
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> al = new ArrayList<>();
        if(root == null){
            return al;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        al.add(root.val);
        queue.add(root);
        while(!queue.isEmpty()){
           int count = queue.size();
           
          while(count > 0){
            TreeNode node = queue.remove();
              count --;
              if(count == 0){
                  result.add(node.val);
              }
            if(node.left != null){
               queue.add(node.left);
           
            }
            if(node.right != null){
               queue.add(node.right);       
            }
          }
        }
        return result;
    }
}
-----------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> result = new ArrayList<>();
    public List<Integer> rightSideView(TreeNode root) {
        if(root == null){
            return result;
        }
        levelOrder(root, 0);
        return result;
    }
    public void levelOrder(TreeNode root, int level){
        if(root == null){
            return;
        }
        if(result.size() == level){
            result.add(root.val);
        }
        levelOrder(root.right, level+1);
        levelOrder(root.left, level+1);
    }
}
