class Solution {
    int count = 0;
    int dp[][] ;
   
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        dp = new int[obstacleGrid.length][obstacleGrid[0].length];
        for(int i[]: dp){
          Arrays.fill(i, -1);
        }        
        return dfs(obstacleGrid, 0, 0);
    }
    public int dfs(int grid[][], int row, int col){
        if(isSafe(grid, row, col)){
            if(dp[row][col] != -1){
                return dp[row][col];
            }
            if(row == grid.length-1 && col == grid[0].length-1){
                count++;
                return dp[row][col] = count;
            }
            int res = dfs(grid, row+1, col)+ dfs(grid, row, col+1);
            return dp[row][col] = res;
        }
        return 0;
    }
    public boolean isSafe(int[][]grid, int x, int y){
        if(x >= 0 && x < grid.length && y>=0 && y< grid[0].length && grid[x][y] == 0){
            return true;
        }
        return false;
    }
}

-------------------------
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        for(int i = 0; i<obstacleGrid.length; i++){
            for(int j = 0; j<obstacleGrid[0].length; j++){
                if(i == 0 || j == 0){
                   if(obstacleGrid[i][j] == 1 || (i !=0 && obstacleGrid[i-1][j] == 0) || (j !=0 &&        obstacleGrid[i][j-1] == 0)){
                       obstacleGrid[i][j] = 0;
                   }else{
                       obstacleGrid[i][j] = 1;
                   }
                }else{
                   if(obstacleGrid[i][j] == 1){
                       obstacleGrid[i][j] = 0; 
                   }else{
                       obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]; 
                   }
                }
            }            
        }
        return obstacleGrid[obstacleGrid.length-1][obstacleGrid[0].length-1];
    }
}