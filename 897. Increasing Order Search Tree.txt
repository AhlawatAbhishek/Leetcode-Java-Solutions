/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> al = new ArrayList<Integer>();
    public TreeNode increasingBST(TreeNode root) {
        if(root == null){
            return null;
        }
       inOrder(root);
        if(al.size() == 1){
            return new TreeNode(al.get(0));
        }
        Collections.sort(al);
       return buildTree(al); 
    }
    public void  inOrder(TreeNode root){
        if(root == null){
            return ;
        }
        inOrder(root.left);
        al.add(root.val);
        inOrder(root.right);
        
    }
    public TreeNode buildTree(ArrayList<Integer> al){
        TreeNode root = new TreeNode(al.get(0));
        TreeNode dummyRoot = root;
        for(int i = 1; i<al.size(); i++){
            root.right = new TreeNode(al.get(i));
            if(i == al.size()-1){
                return dummyRoot;
            }
            root = root.right;
        }
        return dummyRoot;
    }
}
----------------------------java-----------------------------

class Solution {
    public TreeNode increasingBST(TreeNode root) {
        ArrayList<TreeNode> list = new ArrayList<>();
        populateList(root, list);
        TreeNode newRoot = null;
        for(int indx = 0; indx<list.size()-1; indx++){
            TreeNode node = list.get(indx), nextNode = list.get(indx+1);
            if(newRoot == null)newRoot = node;
            node.left = null;
            node.right = nextNode;
            nextNode.left = null;
        }
        return newRoot == null ? (list.size() == 0 ? null : list.get(0)) : newRoot;
        
    }
    private void populateList(TreeNode root, ArrayList<TreeNode> li){
        if(root == null)return;
        populateList(root.left, li);
        li.add(root);
        populateList(root.right, li);
    }
}
------------------c++---------------------------------------

class Solution {
private:
    TreeNode * curr = NULL;
public:
    TreeNode* increasingBST(TreeNode* root) {
        TreeNode * ans = new TreeNode();
        curr = ans;
        reLink(root);
        return ans->right;
    }
private:     
    void reLink(TreeNode * root){
        if(root == NULL)return;
        reLink(root->left);
        curr->right = root;
        curr = root;
        root->left = NULL;
        reLink(root->right);
    }
};
