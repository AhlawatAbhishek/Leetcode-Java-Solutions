/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        ListNode temp = head;
        int size = 0;
        while(temp != null){
            size++;
            temp = temp.next;
        }
        int arr[] = new int[size];
        ListNode temp2 =head;
        int i = 0;
        while(temp2 != null && i < arr.length){
            arr[i++] = temp2.val;
            temp2 = temp2.next;
        }
        Arrays.sort(arr);
        ListNode temp3 = head;
        int j = 0;
        while(temp3 != null && j < arr.length){
            temp3.val = arr[j++];
            temp3 = temp3.next;
        }
        return head;
    }
}
-------------------------
class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode temp = head;
        ListNode slow = head;
        ListNode fast = head;
        while(fast != null && fast.next != null){
            temp = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        temp.next = null;
        ListNode left_side = sortList(head);
        ListNode right_side = sortList(slow);
        return merge(left_side, right_side);
    }
    public ListNode merge(ListNode l1, ListNode l2){
        ListNode sorted_temp = new ListNode(0);
        ListNode currentNode = sorted_temp;
        while(l1 != null  && l2 != null){
            if(l1.val < l2.val){
                currentNode.next = l1;
                l1 = l1.next;
            }else{
                currentNode.next = l2;
                l2 = l2.next;
            }
            currentNode = currentNode.next;
        }
        if(l1 != null){
            currentNode.next = l1;
        }
        if(l2 != null){
            currentNode.next = l2;
        }
        return sorted_temp.next;
    }
}