class Solution {
     private class DisjointSet{
       private int parent[] = null, rank[] = null;
       public DisjointSet(int size){
           parent = new int[size];
           rank = new int[size];
           for(int node = 0; node < parent.length; node++){
               parent[node] = node;
           }
       }
       public int find(int node){
           if(this.parent[node] != node){
               parent[node] = find(parent[node]);
           }
           return parent[node];
       } 
       public void union(int node1, int node2){
           int oneRep = find(node1), twoRep = find(node2);
           if(oneRep == twoRep){
               return;
           }
           if(rank[oneRep] < rank[twoRep]){
               parent[oneRep] = twoRep;
           }else if(rank[twoRep] < rank[oneRep]){
               parent[twoRep] = oneRep;
           }else{
               parent[oneRep] = twoRep;
               rank[twoRep]++;
           }
       }
       public void reset(int node){
           this.parent[node] = node;
       } 
       public boolean isConnected(int node1, int node2){
           return find(node1) == find(node2);
       }
    }
    private HashSet<Integer> scrtKnowers = new HashSet<>();
    private DisjointSet dSet = null;
    public List<Integer> findAllPeople(int n, int[][] meetings, int firstPerson) {
        Arrays.sort(meetings, (a, b)-> a[2] - b[2]);
        
        scrtKnowers.add(0);
        scrtKnowers.add(firstPerson); 
        dSet = new DisjointSet(n);
         dSet.union(0, firstPerson);
        buildGraph(meetings, n);        
        return scrtKnowers.stream().collect(Collectors.toList());
    }
    
     private void buildGraph(int meetings[][], int totalPersons){
        int len = meetings.length;
        for(int indx = 0; indx<len; indx++){
            int currMeetId = indx, currMeetTime = meetings[indx][2];
            while(currMeetId < len && meetings[currMeetId][2]== currMeetTime){
                dSet.union(meetings[currMeetId][0], meetings[currMeetId][1]);
                currMeetId++;
            }
            currMeetId = indx;
             while(indx < len && meetings[indx][2] == currMeetTime){
                    int per1 = meetings[indx][0], per2 = meetings[indx][1];
                 if(dSet.find(per1) == dSet.find(0) || dSet.find(per2) == dSet.find(0)){
                  scrtKnowers.add(per1);
                  scrtKnowers.add(per2);
                 }else{
                     dSet.reset(per1);
                     dSet.reset(per2);
                 }    
                 indx++;
            }          
            indx--;
        }
    }
}