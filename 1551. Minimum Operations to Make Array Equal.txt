class Solution {
    public int minOperations(int n) {
        int sum = 0;
        int arr[] = new int[n];
        for(int i = 0 ; i< n; i++){
            arr[i] = (2 * i) + 1;
            sum += arr[i];
        }
        int target = sum / n;       
        Set<Integer> set = new HashSet<>();
        for(int i : arr){
            int x = (int)Math.abs(i-target);
            set.add(x);
        }
        int ans = 0;
        Iterator<Integer> it = set.iterator();
        while(it.hasNext()){
            ans += it.next();
        }
        return ans;
    }
}
--------------------------------------


class Solution {
    // TC : O(n)
    // SC : O(1)
     public int minOperations(int n) {
         int ans = 0;
         for(int i=1;i<n;i=i+2){
             ans += (n-i);
         }
         return ans;
     }

    // TC : O(1)
    // TC : O(1)
    public int minOperations(int n) {
        if(n%2==1){
            // n is odd
            n =n /2;
            return n*(n+1);
        } else{
            // n is even
            n =n/2;
            return n*n;
        }
    }
}