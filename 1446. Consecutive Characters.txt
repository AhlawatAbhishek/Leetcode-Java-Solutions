--post link--https://leetcode.com/problems/consecutive-characters/discuss/1626185/java-olen-time-o1-space-easy-to-understand-and-detailed-explanation
Intuition: .Since we are to find the 'length of a non-empty substring that contains only one unique character'.
         
            .That is nothing but the length of longest repeating substring. Which can be found by using two variables maxLen &
             currLen, both set to 1 since a single character is also a substring.
    
            .Increment currLen if the present character is same as the previous and update maxLen. If it is not the case the set
            the currLen to 1.
                
            .Any corrections, suggestions or optimizations to code are welcomed. :)    
//Time complexity: O(len), len = s.length()
// Auxiliary space: O(1)
class Solution {
    public int maxPower(String s) {
        int maxLen = 1, currLen = 1;
        for(int indx = 1; indx<s.length(); indx++){
            if(s.charAt(indx-1) == s.charAt(indx)){
                currLen++;
                maxLen = Math.max(maxLen, currLen);
            }else{
                currLen = 1;
            }
        }
        return maxLen;
    }
}
If you found this post helpful then please like and comment to increase its reach so that it can help others. :)