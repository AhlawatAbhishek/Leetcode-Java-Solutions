/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<TreeNode> li = new ArrayList<>();
    public void flatten(TreeNode root) {
        if(root == null){
            return;
        }
        populateList(root);
         root = li.get(0);
        for(int i = 1; i<li.size(); i++){
            root.right = li.get(i);
            root.left = null;
            root = root.right;
        }
        root.right = null;
        root.left = null;
    }
    public void populateList(TreeNode root){
        if(root == null){
            return;
        }
        li.add(root);
        populateList(root.left);
        populateList(root.right);
    }
}
-------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
        if(root == null){
            return;
        }
        while(root != null){
            if(root.left != null){
                TreeNode left = root.left;
                TreeNode current = root.left;
                while(current.right != null){
                    current = current.right;
                }
                current.right = root.right;
                root.left = null;
                root.right = left;
            }
            root = root.right;
        }
    }
}
--------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
         if(root == null){
            return;
        }
        TreeNode leftSide = root.left;
        TreeNode rightSide = root.right; 
        root.left = null;
       flatten(leftSide);
       flatten(root.right);
        root.right = leftSide;
        TreeNode current = root;
        while(current.right != null){
            current = current.right;
        }
        current.right = rightSide;
    }
}