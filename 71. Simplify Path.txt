class Solution {
    public String simplifyPath(String path) {
        StringBuilder result = new StringBuilder();
        Stack<String> st = new Stack<>();
        String str[] = path.split("/");
        for(int i = 0; i<str.length;i ++){
            if(!st.isEmpty() && str[i].equals("..")){
                st.pop();
            }else if(!str[i].equals("") && !str[i].equals(".") && !str[i].equals("..")){
                st.push(str[i]);
            }
        }
        if(st.isEmpty()){
            return "/";
        }
        while(!st.isEmpty()){
            result.insert(0, st.pop()).insert(0, "/");
        }
        return result.toString();
    }
}
---------------------------
class Solution {
    public String simplifyPath(String path) {
        StringBuilder result = new StringBuilder();
        Deque<String> st = new LinkedList<>();
        String str[] = path.split("/");
        for(int i = 0; i<str.length;i ++){
            if(!st.isEmpty() && str[i].equals("..")){
                st.poll();
            }else if(!str[i].equals("") && !str[i].equals(".") && !str[i].equals("..")){
                st.push(str[i]);
            }
        }
        if(st.isEmpty()){
            return "/";
        }
        while(!st.isEmpty()){
            result.append("/").append(st.pollLast());
        }
        return result.toString();
    }
}