class Solution {
    int preInd = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return buildTree(preorder, inorder, 0, inorder.length-1);
    }
    public TreeNode buildTree(int pre[], int in[], int start, int end){
        if(preInd >= pre.length){
            return null;
        }
        TreeNode root = new TreeNode(pre[preInd]);
        int inInd = search(in, start, end, pre[preInd]);
        if(inInd == -1){
            return null;
        }
        preInd++;
        root.left = buildTree(pre, in , start, inInd-1);
        root.right = buildTree(pre, in, inInd+1, end);
        return root;
    }
    public int search(int in[], int start, int end, int value){
        while(start <= end){
            if(in[start] == value){
                return start;
            }
            start++;
        }
        return -1;
    }
}
-----------------------------------------------------------------------------------------------
class Solution {
    int preInd = 0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return buildTree(preorder, inorder, 0, inorder.length-1);
    }
    public TreeNode buildTree(int pre[], int in[], int start, int end){
        if(preInd >= pre.length){
            return null;
        }
        TreeNode root = new TreeNode(pre[preInd]);
        int inInd = search(in, start, end, pre[preInd]);
        if(inInd == -1){
            return null;
        }
        preInd++;
        root.left = buildTree(pre, in , start, inInd-1);
        root.right = buildTree(pre, in, inInd+1, end);
        return root;
    }
    public int search(int in[], int start, int end, int value){
        while(start <= end){
            if(in[start] == value){
                return start;
            }
            start++;
        }
        return -1;
    }
}