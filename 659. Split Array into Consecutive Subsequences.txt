class Solution {
    public boolean isPossible(int[] nums) {
        if(nums.length < 6)return false;
        int firstLen =1, secondLen = 0, indx = 1, prev = nums[0];
        for( ; indx<nums.length; indx++){
            if(firstLen == 3){
                System.out.println("indx " + indx);
                break;
            }
            if(nums[indx] != prev && prev+1 == nums[indx]){
                prev = nums[indx];
                nums[indx] = -2000;
                firstLen++;
            }else if(nums[indx] != prev){
                prev = nums[indx];
                firstLen = 1;
            }
        }
        // indx = 0;
        // for(;indx<nums.length;indx++){
        //     if(nums[indx] != -2000){
        //         break;
        //     }
        // }
        // prev = nums[indx++];
        // for( ; indx<nums.length; indx++){
        //     if(nums[indx] == -2000) continue;
        //     if(secondLen == 3){
        //         break;
        //     }
        //     if(nums[indx] != prev && prev+1 == nums[indx]){
        //         prev = nums[indx];
        //         secondLen++;
        //     }else if(nums[indx] != prev){
        //         prev = nums[indx];
        //         secondLen = 1;
        //     }
        // }
        // System.out.println("first " + firstLen+ " secondLen " + secondLen);
        // return firstLen == 3 && secondLen == 3;
        return firstLen == 3;
    }
}
----------------------
public boolean isPossible(int[] nums) {
    int pre = Integer.MIN_VALUE;
	int p1 = 0;
	int p2 = 0;
	int p3 = 0;
	
    int cur = 0;
	int cnt = 0;
	int c1 = 0;
	int c2 = 0;
	int c3 = 0;
        
    for (int i = 0; i < nums.length; pre = cur, p1 = c1, p2 = c2, p3 = c3) {
        for (cur = nums[i], cnt = 0; i < nums.length && cur == nums[i]; i++) {
			cnt++;
		}
        
        if (cur != pre + 1) {
            if (p1 != 0 || p2 != 0) {
				return false;
			}
			
            c1 = cnt;
			c2 = 0;
			c3 = 0;
            
        } else {
            if (cnt < p1 + p2) {
				return false;
			}
			
            c1 = Math.max(0, cnt - (p1 + p2 + p3));
            c2 = p1;
            c3 = p2 + Math.min(p3, cnt - (p1 + p2));
        }
    }
    
    return (p1 == 0 && p2 == 0);
}
--------------------------------------
class Solution {
   public boolean isPossible(int[] nums) {
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        HashMap<Integer, Integer> grpMap = new HashMap<>();
        for(int num : nums){
            freqMap.put(num, freqMap.getOrDefault(num, 0)+1);
        }
        for(int num : nums){
            if(freqMap.getOrDefault(num, 0) <= 0){
                continue;
            }else if(freqMap.getOrDefault(num, 0) > 0 && grpMap.getOrDefault(num ,0) > 0){
                 freqMap.put(num, freqMap.getOrDefault(num , 0) -1);
                 grpMap.put(num, grpMap.getOrDefault(num, 0)-1);
                 grpMap.put(num+1, grpMap.getOrDefault(num+1, 0)+1);
            }else if(freqMap.getOrDefault(num+1, 0) > 0 && freqMap.getOrDefault(num+2, 0) > 0){
                  freqMap.put(num, freqMap.getOrDefault(num , 0) -1);
                  freqMap.put(num+1, freqMap.getOrDefault(num+1 , 0) -1);
                  freqMap.put(num+2, freqMap.getOrDefault(num+2 , 0) -1);
                  grpMap.put(num+3, grpMap.getOrDefault(num+3, 0)+1);
            }else{
                return false;
            }
        }
       return true;
   }
}