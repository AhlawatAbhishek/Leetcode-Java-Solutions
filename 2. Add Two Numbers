class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
       int carry = 0;
        ListNode *dummyHead = new ListNode(-1), *curr = dummyHead;
        while(l1 != NULL || l2 != NULL){
             int oneVal = l1 == NULL ? -1 : l1->val;
             int twoVal = l2 == NULL ? -1 : l2->val;
             if(oneVal != -1)l1 = l1->next;
             if(twoVal != -1)l2 = l2->next;
             int sum = (carry + (oneVal == -1 ? 0 : oneVal) + (twoVal == -1 ? 0 : twoVal));
             carry = sum / 10;
             curr->next = new ListNode(sum%10);
             curr = curr->next;
        }
        if(carry == 1){
            curr->next = new ListNode(carry);
        }
        
        return dummyHead->next; 
    }
};
---------------------------------------------------
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode dummyHead = new ListNode(-1), curr = dummyHead;
        while(l1 != null || l2 != null){
             int oneVal = l1 == null ? -1 : l1.val;
             int twoVal = l2 == null ? -1 : l2.val;
             if(oneVal != -1)l1 = l1.next;
             if(twoVal != -1)l2 = l2.next;
             int sum = (carry + (oneVal == -1 ? 0 : oneVal) + (twoVal == -1 ? 0 : twoVal));
             carry = sum / 10;
             curr.next = new ListNode(sum%10);
             curr = curr.next;
        }
        if(carry == 1){
            curr.next = new ListNode(carry);
        }
        
        return dummyHead.next;
    }
}
