/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if(head == null || head.next == null) return;
        ListNode fast = head, slow = head, prev = null;
        while(fast != null && fast.next != null){
            prev = slow;
            fast = fast.next.next;
            slow = slow.next;
        }
        prev.next = null;
        slow = reverse(slow);
        merge(head, slow);
    }
    public void merge(ListNode l1, ListNode l2){
        while(l1 != null){
           ListNode l1_next = l1.next;
           ListNode l2_next = l2.next;
           l1.next = l2;
           if(l1_next == null){
             break;
           }
           l2.next = l1_next; 
           l2 = l2_next;
           l1 = l1_next; 
        }

    }
    public ListNode reverse(ListNode head){
       ListNode curr  = head, prev = null;
        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
}