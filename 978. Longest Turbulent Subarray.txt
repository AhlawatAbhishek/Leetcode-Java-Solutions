// Time complexity: O(N), since we are traversing the arr only once
// Auxiliary Space : O(1)
class Solution {
    public int maxTurbulenceSize(int[] arr) {
        int n = arr.length;
//         check for edge case
        if(n == 1) return 1;
//         we are using 2 pointer approach
        int left = 0, right = 0, maxSize = 1;
        while(left + 1 < n){
//             if the next number is same as the current number then continue after incerementing left;
            if(arr[left+1] == arr[left]){
                left++;
                continue;
            }
//             set right to next of left each time
            right= left+1;
//             keep incrementing right till the conditions of valley or hill is met
            while(right+1 < n && isTrbu(arr, right)){
                right++;
            }
//            update maxSize each time
            maxSize = Math.max(maxSize, right-left+1);
//             set left to current value of right
            left = right;
        }
        return maxSize;
    }
    public boolean isTrbu(int arr[], int index){
//        return true if it is a hill or valley 
        return (arr[index-1] < arr[index] && arr[index] > arr[index+1]) || (arr[index-1] > arr[index] && arr[index] < arr[index+1]);
    }
}