/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
   public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 1)
        {
            return lists[0];
        }        
        ListNode f = null;
       
        for(int i = 0;i<lists.length-1;i++){
             ListNode temp = new ListNode(0);
             // temp.next = lists[i];
             ListNode curr = temp;
            ListNode l1 = lists[i];
            ListNode l2 = lists[i+1];
            while(l1 !=null && l2 !=null){
                if(l1.val < l2.val){
                    curr.next = l1;
                    l1 = l1.next;
                }else{
                    curr.next = l2;
                    l2 = l2.next;
                }
                curr = curr.next;
            }
            
            if(l1 != null){
                curr.next = l1;
            }
             if(l2 != null){
                curr.next = l2;
            }
            lists[i+1] = temp.next;
            f = temp.next;
        }
        return f;
    }
}-----------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ArrayList<Integer> al = new ArrayList<>();
        for(int i = 0; i<lists.length; i++){
            ListNode n = lists[i];
            while(n != null){
                al.add(n.val);
                n = n.next;
            }
        }
        if(al.size() == 0){
            return null;
        }
        Collections.sort(al);
        ListNode n = new ListNode(al.get(0));
        ListNode head = n;
        for(int i = 1; i<al.size(); i++){
             ListNode node = new ListNode(al.get(i));
            n.next = node;
            n = node;
        }
        return head;
    }
}