
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    // TC : O(n)
    // SC : O(1)
    public ListNode swapNodes(ListNode head, int k) {
        k = k-1;
        ListNode firstN = head;
        while(k>0){
            firstN = firstN.next;
            k--;
        }

        ListNode f = firstN;
        ListNode secondN = head;
        while(f.next!=null){
            secondN = secondN.next;
            f = f.next;
        }

        int temp = firstN.val;
        firstN.val = secondN.val;
        secondN.val = temp;

        return head;


    }
}
---------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        Stack<ListNode> st = new Stack<>();
        ListNode temp = head;
        int idx = 1;
        ListNode two = null;
        while(temp != null){
            if(idx == k){
                two = temp;
            }
            st.add(temp);
            temp = temp.next;
            idx++;
        }
        int index = 0;
        ListNode one = null;
        while(!st.isEmpty()){
            index ++;
            ListNode tempt = st.pop();
            if(index == k){
                one = tempt;
            }
        }
        int tt = two.val;
        two.val = one.val;
        one.val = tt;
        return head;
    }
}
--------------------------java-------------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapNodes(ListNode head, int k) {
        int len = 0;
        ListNode kth = null;
        for(ListNode curr = head; curr!=null ;curr = curr.next){
            len++;
            if(len == k){
                kth = curr;
            }
        }
        // cout<<"len is:"<<len<<"\n";
        ListNode curr = head; 
        int reqIndx = len - k, currIndx = 1;
        // cout<<"reqIndx is: "<<reqIndx<<"\n";
        for(;currIndx<=reqIndx && curr != null; curr = curr.next, currIndx++){
        }
        int temp = kth.val;
        kth.val = curr.val;
        curr.val = temp;
        return head;
    }
}
------------------------------------c++-----------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        int len = 0;
        ListNode * kth = NULL;
        for(ListNode *curr = head; curr!=NULL ;curr = curr->next){
            len++;
            if(len == k){
                kth = curr;
            }
        }
        // cout<<"len is:"<<len<<"\n";
        ListNode *curr = head; 
        int reqIndx = len - k, currIndx = 1;
        // cout<<"reqIndx is: "<<reqIndx<<"\n";
        for(; curr!=NULL && currIndx<=reqIndx && curr != NULL; curr = curr->next, currIndx++){
        }
        int temp = kth->val;
        kth->val = curr->val;
        curr->val = temp;
        return head;
    }
};
-------------------------------------c++------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapNodes(ListNode* head, int k) {
        int len = 0;
        ListNode * kth = NULL, *endKth = NULL;
        for(ListNode *curr = head; curr!=NULL ;curr = curr->next){
            len++;
            if(endKth != NULL)endKth = endKth->next;
            if(len == k){
                kth = curr;
                endKth = head;
            }
        }
        int temp = endKth->val;
        endKth->val = kth->val;
        kth->val = temp;
        return head;
    }
};
