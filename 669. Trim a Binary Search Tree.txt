class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        return trim(root, low, high);
    }
    public TreeNode trim(TreeNode root, int low, int high){
        if(root == null){
            return null;
        }
        if(root.val <low){
             return  trim(root.right, low, high);
     
        }else if(root.val > high){
           return trim(root.left, low, high);
        }else{
            root.left = trim(root.left, low, high);
             root.right = trim(root.right, low, high);
            return root;
        }
 
    }
}
-----------------------------------------------java---------------------------------------
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if(root == null)return root;
        int val = root.val;
        root.left = trimBST(root.left, low, high);
        root.right = trimBST(root.right, low, high);
        if(root.val > high){
            root.right = null;
            return root.left;
        }else if(root.val < low){
            root.left = null;
            return root.right;
        }else{
            return root;
        }
    }
}
----------------------c++-------------------------------
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if(root == NULL)return root;
        int val = root->val;
        root->left = trimBST(root->left, low, high);
        root->right = trimBST(root->right, low, high);
        if(root->val > high){
            root->right = NULL;
            return root->left;
        }else if(root->val < low){
            root->left = NULL;
            return root->right;
        }else{
            return root;
        }
    }
};
-------------------------------------------------------------
