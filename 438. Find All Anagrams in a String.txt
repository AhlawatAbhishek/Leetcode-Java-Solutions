class Solution {
    public List<Integer> findAnagrams(String s, String p) {
         int charCnt[] = new int[26], pLen = p.length();
         List<Integer> res = new ArrayList<>();
        if(s.length() == 0) return res;
        for(int indx = 0; indx<pLen; indx++){
            charCnt[p.charAt(indx)-'a']++;
        }
        //Using the fact given in the anagrams are just the rearrangements of the characters
        //therefore a sliding window approach combined with hashing using array can be worked out for this question.
        int snakeLen = pLen, right = 0, left = 0, sLen = s.length();
        while(right<sLen){
            if(charCnt[s.charAt(right++)-'a']-->=1)snakeLen--;
            if(snakeLen == 0) res.add(left);
            if(right - left == pLen && charCnt[s.charAt(left++) - 'a']++>=0)snakeLen++;
        }
        return res;
    }
}
--------------------------------------------------
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        int pLen = p.length();
        vector<int> res, charCnt(26, 0);
        if(s.length() == 0) return res;
        for(int indx = 0; indx<pLen; indx++){
            charCnt[p[indx]-'a']++;
        }
        int snakeLen = pLen, right = 0, left = 0, sLen = s.length();
        while(right<sLen){
            if(charCnt[s[right++]-'a']-->=1)snakeLen--;
            if(snakeLen == 0) res.emplace_back(left);
            if(right - left == pLen && charCnt[s[left++] - 'a']++>=0)snakeLen++;
        }
        return res;
    }
};