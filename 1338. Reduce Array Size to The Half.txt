// TC: O(NLogN)
// AS: Auxiliary Space : O(N)
class Solution {
    public int minSetSize(int[] arr) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i : arr){
            map.put(i, map.getOrDefault(i, 0)+1);
        }
        Queue<Map.Entry<Integer, Integer>> queue = new PriorityQueue<>((a, b)->(b.getValue() - a.getValue()));
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            queue.offer(entry);
        }
        int len = arr.length;
        int size = 0, count = 0;
        while(!queue.isEmpty()){
            count++;
            Map.Entry<Integer, Integer> entry = queue.poll();
            System.out.print(entry.getKey()+" ");
            size += entry.getValue();
            if(size >= (len / 2)){
                break;
            }
        }
        return count;
    }
}
------------------------------
// TC: O(NLogN)
// AS: Auxiliary Space : O(N)
class Solution {
    public int minSetSize(int[] arr) {
        Map<Integer, Integer> freq = new HashMap<>();
        for(int i : arr){
            freq.put(i, freq.getOrDefault(i, 0)+1);
        }
        Queue<Integer> queue = new PriorityQueue<>((a, b)->(b - a));
        for(Map.Entry<Integer, Integer> entry :freq.entrySet()){
            queue.offer(entry.getValue());
        }
        int len = arr.length;
        int size = 0, count = 0;
        while(!queue.isEmpty()){
            count++;
            size += queue.poll();
            if(size >= (len / 2)){
                break;
            }
        }
        return count;
    }
}
---------------------
// TC: O(NLogN)
// AS: Auxiliary Space : O(N)
class Solution {
    public int minSetSize(int[] arr) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i : arr){
            map.put(i, map.getOrDefault(i, 0)+1);
        }
        List<Integer> list = new ArrayList<>(map.values());
        Collections.sort(list, Collections.reverseOrder());
        int len = arr.length;
        int size = 0, count = 0, index = 0;
        while(index < list.size()){
            count++;
            size += list.get(index++);
            if(size >= (len / 2)){
                break;
            }
        }
        return count;
    }
}