/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        if(root == null){
            return 0;
        }
        int sum = 0;
        if(root.val  >= low && root.val <= high){
            sum += root.val;
        }
        sum += rangeSumBST(root.left, low, high);
        sum += rangeSumBST(root.right, low, high);
        return sum;
    }
}---------------
----------------------------------post link:https://leetcode.com/problems/range-sum-of-bst/discuss/1628051/Java-or-DFS-and-also-leveraging-BST-Properties-or-Easy-to-understand-and-detailed-explanation.%3A)
------
Inuition: .Since we are asked to 'return the sum of values of all nodes with a value in the inclusive range [low, high].' The
           first approach that comes to mind is visiting each node in either depth first fashion or breadth first fashion &
           adding it's value to totalSum if it is in the given range.
    
          .But it is also given that the tree is a 'BST', so we must leverage it's properties and prune our recusion tree of 
           DFS(it's more intuitive for leveraging BST properties) that we will be doing in method 'calcRngSum'
    
          .For val of current node three pruning cases will arise:
          1.: If the val == low && val == high, then return after adding its value to totalSum
          2.: val<=low, then donot recurse for the left sub-tree of the current node and if val == low, then add val to totalSum
              and recurse for the right sub-tree only.
          3.: val>=high, then donot recurse for the right sub-tree of the current node and if val == high, then add val to
              totalSum and recurse for the left sub-tree only. 
                  
          .If it's the case other than above three i.e. node's val is low<val<high, then add it's val to totalSum and recurse
           for both of the sub-trees, left and right.
               
          .Any suggestions, corrections and optimizations to code are welcomed. :)     
//Time complexity: O(h), h = height of BST, which can be upto n=number of nodes in tree, in case the tree is skewed.
//Auxiliary Space: O(h),  for the recursion call stack of method 'calcRngSum'              
class Solution {
    private int totalSum;
    public int rangeSumBST(TreeNode root, int low, int high) {
        totalSum = 0;
        calcRngSum(root, low, high);
        return totalSum;
    }
    //DFS fashion traversal
    private void calcRngSum(TreeNode root, int low, int high){
        if(root == null) return;
         int val = root.val;
        //Three pruning cases and last is in-range exclusive case
        if(val == low && val == high){
            totalSum += val;
        }
       
        if(val <= low){
            if(val == low)totalSum+=val;
            calcRngSum(root.right, low, high);
        }else if(val >= high){
            if(val == high)totalSum += val;
            calcRngSum(root.left, low, high);
        }else{//low<val<high
            totalSum += val;
            calcRngSum(root.left, low, high);
            calcRngSum(root.right, low, high);
        }
    }
}
If you found this post helpful then please like and comment to increase it's reach. So that it can also help others.:)
-------cleaner implementation of above code-------
--------------------------------------imported :)---------
class Solution {
    int ans;
    public int rangeSumBST(TreeNode root, int L, int R) {
        ans = 0;
        dfs(root, L, R);
        return ans;
    }

    public void dfs(TreeNode node, int L, int R) {
        if (node != null) {
            if (L <= node.val && node.val <= R)
                ans += node.val;
            if (L < node.val)
                dfs(node.left, L, R);
            if (node.val < R)
                dfs(node.right, L, R);
        }
    }
} 
-------------------------Imported iterative solution----
class Solution {
    public int rangeSumBST(TreeNode root, int L, int R) {
        int ans = 0;
        Stack<TreeNode> stack = new Stack();
        stack.push(root);
        while (!stack.isEmpty()) {
            TreeNode node = stack.pop();
            if (node != null) {
                if (L <= node.val && node.val <= R)
                    ans += node.val;
                if (L < node.val)
                    stack.push(node.left);
                if (node.val < R)
                    stack.push(node.right);
            }
        }
        return ans;
    }
}
--------
Complexity Analysis

Time Complexity: O(N), where N is the number of nodes in the tree.

Space Complexity: O(N)

For the recursive implementation, the recursion will consume additional space in the function call stack. In the worst case, the tree is of chain shape, and we will reach all the way down to the leaf node.

For the iterative implementation, essentially we are doing a BFS (Breadth-First Search) traversal, where the stack will contain no more than two levels of the nodes. The maximal number of nodes in a binary tree is N/2 
2
N
â€‹
 . Therefore, the maximal space needed for the stack would be O(N).
---------