---------------------
TLE--------------------
 public int findIntegers(int n) {
        int count = 0;
        for(int i = 0 ; i<=n; i++){
            if(!areConsecOnesPresent(i)){
                count++;
            }
        }
        return count;
    }
    public boolean areConsecOnesPresent(int num){
        int x = (num & (num >> 1));
        return x > 0;
        // while(num > 0){
        //     if((num & 1) == 1){
        //         if(isOne){
        //             return true;
        //         }
        //         isOne = true;
        //     }else{
        //         isOne = false;
        //     }
        //     num >>= 1;
        // }
        // return false;
    }
------------------------
class Solution {
    public int findIntegers(int n) {
        int f[] = new int[31];
        f[0] = 1;
        f[1] = 2;
        for(int i = 2; i<f.length; i++){
            f[i] = f[i-1] + f[i-2];
        }
        int k = 30, prevBit = 0, ans = 0;
        while(k >= 0){
            if((n & (1<<k)) > 0){
                ans += f[k];
                if(prevBit != 0) return ans;
                prevBit = 1;
            }else{
                prevBit = 0;
            }
            k--;
        }
        return ans+1;
    }
}