class Solution {
    public int maximumUniqueSubarray(int[] nums) {
        if(nums.length == 1){
            return nums[0] < 0 ? 0 : nums[0];
        }
        Set<Integer> set = new HashSet<>();
        int maxSoFar = 0, maxEndingHere = 0, low = 0, end = 0;
        while(end < nums.length && low<nums.length){
            if(!set.contains(nums[end])){
                maxEndingHere += nums[end];
                set.add(nums[end++]);
                maxSoFar = Math.max(maxSoFar, maxEndingHere);
            }else{
                while(low < nums.length && nums[low] != nums[end]){
                    set.remove(nums[low]);
                    maxEndingHere -= nums[low];
                    low++;
                }
                if(low < nums.length && nums[low] == nums[end]){
                  maxEndingHere -= nums[low];
                    set.remove(nums[low]);
                    low++;
                } 
                set.add(nums[end]);
                maxEndingHere += nums[end++];
                maxSoFar = Math.max(maxSoFar, maxEndingHere);
            }
        }
        return maxSoFar;
    }
}