class Solution {

    private class Point{
    int x, y;
    Point(int x, int y){
        this.x = x;
        this.y = y;
    }
}

    public int[][] outerTrees(int[][] trees) {


      List<Point> points = new ArrayList<>();
         for(int [] tree: trees){
             Point p = new Point(tree[0], tree[1]);
             points.add(p);
         }
         if(points.size() == 1){
             return trees;
         }
         List<Point> res = new ArrayList<>();
         Stack<Point> hull = new Stack<>();
         HashSet<List<Integer>> dup = new HashSet<>();
         Collections.sort(points, (a, b)-> b.y == a.y ? a.x - b.x : a.y - b.y);
          int n = points.size();
           hull.push(points.get(0));
        hull.push(points.get(1));
        // Lower hull
       for(int indx = 2; indx < points.size(); indx++){
             Point top = hull.pop();
             while(!hull.isEmpty() && ccw(hull.peek(), top, points.get(indx)) < 0){
                 top = hull.pop();
             }
             hull.push(top);
             hull.push(points.get(indx));
         }
        //upper hull
        for(int indx = points.size()-2; indx >= 0; indx--){
             Point top = hull.pop();
             while(!hull.isEmpty() && ccw(hull.peek(), top, points.get(indx)) < 0){
                 top = hull.pop();
             }
             hull.push(top);
            hull.push(points.get(indx));
         }
    while(!hull.isEmpty()){
             Point p = hull.pop();
             List<Integer> temp = new ArrayList<>();
             temp.add(p.x); temp.add(p.y);
             if(!dup.contains(temp)){
                 dup.add(temp);
                 res.add(p);
             }
         }

         int ans[][] = new int[res.size()][2];
         int indx =0;
         for(Point p : res){
             ans[indx][0] = p.x;
             ans[indx++][1] = p.y;
         }
        return ans;
    }
    public int ccw(Point a, Point b, Point c){
        // (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x)
        //
        int factor = (c.y-b.y)*(b.x - a.x) - (b.y - a.y)*(c.x - b.x);
        if(factor < 0) return -1;
        else if(factor > 0) return 1;
        else    return 0;
    }
    // public int ccw(Point a, Point b, Point c) {
    //     double crossproduct = (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x);
    //     if      (crossproduct < 0) return -1;
    //     else if (crossproduct > 0) return +1;
    //     else                return  0; // linear in natural
    // }
}