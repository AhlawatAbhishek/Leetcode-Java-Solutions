class Solution {
    public int[][] diagonalSort(int[][] mat) {
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
        
        for(int col = 0; col<mat[0].length; col++){
            int row = 0;
            int colTemp = col;
            int rowTemp = row;
            ArrayList<Integer> al = new ArrayList<>();
            while(row < mat.length && colTemp<mat[0].length){
                al.add(mat[row++][colTemp++]);                
            }
            Collections.sort(al);
            map.put(rowTemp-col, al);
        }
        
        for(int row = 1; row<mat.length; row++){
            int col = 0;
            int rowTemp = row;
            int colTemp = col;
            ArrayList<Integer> al = new ArrayList<>();
            while(rowTemp < mat.length && col<mat[0].length){
                al.add(mat[rowTemp++][col++]);                
            }
            Collections.sort(al);
            map.put(row-colTemp, al);
        }
        
        for(int col = 0; col<mat[0].length; col++){
            int row = 0;
            int diff = row-col;
            int colTemp = col, index = 0;
            ArrayList<Integer> al = map.get(diff);
            while(row<mat.length && colTemp <mat[0].length && index<al.size()){
                mat[row++][colTemp++] = al.get(index++);
            }
        }
        
        for(int row = 1; row<mat.length; row++){
            int col = 0, rowTemp = row, diff = row-col, index = 0;
            ArrayList<Integer> al = map.get(diff);
            if(al == null){
                System.out.print("al is null");
                break;
            }
            while(rowTemp<mat.length && col<mat[0].length && index<al.size()){
                mat[rowTemp++][col++] = al.get(index++);
            }            
        }
        return mat;
    }
}
------------------------------------------
class Solution {
    public int[][] diagonalSort(int[][] mat) {
        int m=mat.length;
        int n=mat[0].length;
        
        //row=0
        for(int col=0;col<n;col++){
            sort(mat,0,col,m,n);
        }
        
        //col=0
        for(int row=1;row<m;row++){
            sort(mat,row,0,m,n);
        }
        
        return mat;
    }
    
    void sort(int[][] mat,int row,int col,int m,int n){
        List<Integer> values=new ArrayList<>();
        int r=row,c=col;
        while(r<m && c<n){
            values.add(mat[r][c]);
            r++;
            c++;
        }
        
        Collections.sort(values);
        
        r=row;
        c=col;
        int ind=0;
        while(r<m && c<n){
            mat[r][c]=values.get(ind++);
            r++;
            c++;
        }
    }
}
