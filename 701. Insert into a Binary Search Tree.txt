/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null){
            return new TreeNode(val);
        }
        if(root.val < val){
            if(root.right == null){
                TreeNode node = new TreeNode(val);
                root.right = node;
            }else{
                insertIntoBST(root.right, val);
            }
        }else{
             if(root.left == null){
                TreeNode node = new TreeNode(val);
                root.left = node;
            }else{
                insertIntoBST(root.left, val);
            }
        }
        return root;
    }
}
--------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//Time complexity: O(h), h is height of the bst
//Auxiliary Space: O(h), h can be upto n(number of nodes in BST) when BST is skewed
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode newNode = new TreeNode(val);
        if(root == null)return newNode;
        TreeNode parent = getParent(root, val, root);
        if(val < parent.val){
            parent.left = newNode;
        }else if(val>parent.val){
            parent.right = newNode;
        }
        return root;
    }
    private TreeNode getParent(TreeNode root, int val, TreeNode parent){
        if(root == null){
            return parent;
        }
        if(val < root.val){
            return getParent(root.left, val, root);
        }else{
            return getParent(root.right, val, root);
        }
    }
}
-----------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//Time complexity: O(h), h is height of the bst
//Auxiliary Space: O(h), h can be upto n(number of nodes in BST) when BST is skewed
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode newNode = new TreeNode(val);
        if(root == null) return newNode;
        TreeNode parent = getParent(root ,val);
        if(parent.val < val){
            parent.right = newNode;
        }else{
            parent.left = newNode;
        }
        return root;
    }
    private TreeNode getParent(TreeNode root, int val){
        TreeNode curr = root, parent = curr;
        while(curr!=null){
            parent = curr;
            if(curr.val > val){
                curr = curr.left;
            }else{
                curr = curr.right;
            }
        }
        return parent;
    }
}