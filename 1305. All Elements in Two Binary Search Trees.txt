/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        if(root1 == null && root2 == null)
        {
            List<Integer> res = new ArrayList<>();
            return res;
        }
        ArrayList<Integer> al1 = new ArrayList<>();
        ArrayList<Integer> al2 = new ArrayList<>();
        makeList(root1, al1);
        makeList(root2, al2);
        for(int x : al2){
            al1.add(x);
        }
        Collections.sort(al1);
        List<Integer> res = al1;
        return res;
    }
    public void makeList(TreeNode root, ArrayList<Integer> al){
        if(root == null){
            return;
        }
        makeList(root.left, al);
        al.add(root.val);
        makeList(root.right, al);
    }
}
--------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        if(root1 == null && root2 == null)return new ArrayList<>();
        List<Integer> tree1 = new ArrayList<>(), tree2 = new ArrayList<>();
        popuList(root1, tree1);
        popuList(root2, tree2);
        return mergeList(tree1, tree2);
    }
    private List<Integer> mergeList(List<Integer> tree1, List<Integer> tree2){
        int len1 = tree1.size(), len2 = tree2.size(), ind1 = 0, ind2 = 0;
        List<Integer> res = new ArrayList<>();
        while(ind1<len1 && ind2<len2){
            int num1 = tree1.get(ind1), num2 = tree2.get(ind2);
            if(num1 < num2){
                ind1++;
                res.add(num1);
            }else{
                ind2++;
                res.add(num2);
            }
        }
        while(ind1 < len1){
            res.add(tree1.get(ind1++));
        }
        while(ind2 < len2){
            res.add(tree2.get(ind2++));
        }
        return res;
    }
    private void popuList(TreeNode root, List<Integer> tree){
        if(root == null) return;
        popuList(root.left, tree);
        tree.add(root.val);
        popuList(root.right, tree);
    }
    
}
-----------------------------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        Deque<TreeNode> st1 = new ArrayDeque<>(), st2 = new ArrayDeque();
        List<Integer> res = new ArrayList<>();
        while(root1 != null || root2 != null || !st1.isEmpty() || !st2.isEmpty()){
            while(root1 != null){
                st1.offerLast(root1);
                root1 = root1.left;
            }
            while(root2 != null){
                st2.offerLast(root2);
                root2 = root2.left;
            }
            if(st2.isEmpty() || !st1.isEmpty() && st1.peekLast().val < st2.peekLast().val){
                TreeNode node1 = st1.pollLast();
                res.add(node1.val);
                root1 = node1.right;
                
            }else{
                TreeNode node2 = st2.pollLast();
                res.add(node2.val);
                root2 = node2.right;
            }
        }
        return res;
    }
}