class Solution {
    int area = 0;
    public int maxAreaOfIsland(int[][] grid) {
        boolean visited[][] = new boolean[grid.length][grid[0].length];
        int maxArea = 0;
        for(int i = 0; i<grid.length; i++){
            for(int j = 0; j<grid[0].length; j++){
                if(visited[i][j] != true){
                    area = 0;
                    dfs(grid, visited, i, j);
                    maxArea = Math.max(area, maxArea);    
                }
            }
        }
        return maxArea;
    }
    boolean isSafe(int [][] grid, boolean[][] visited, int i, int j){
        if(i < grid.length && j<grid[0].length && i >= 0&& j>=0 && !visited[i][j] && grid[i][j] != 0){
            return true;
        }
        return false;
    }
    public void dfs(int [][]grid, boolean[][] visited, int row, int col){
        if(isSafe(grid, visited, row, col)){
            visited[row][col] = true;
            area++;
            dfs(grid, visited, row+1, col);
            dfs(grid, visited, row-1,  col);
            dfs(grid, visited, row, col+1);
            dfs(grid, visited, row, col-1);
        }
    }
    
}
------------------
without use of visited array-----------------------------
class Solution {
    int area = 0;
    public int maxAreaOfIsland(int[][] grid) {
        int maxArea = 0;
        for(int i = 0; i<grid.length; i++){
            for(int j = 0; j<grid[0].length; j++){
                if(grid[i][j] != 0){
                    area = 0;
                    dfs(grid, i, j);
                    maxArea = Math.max(area, maxArea);    
                }
            }
        }
        return maxArea;
    }
    boolean isSafe(int [][] grid,  int i, int j){
        if(i < grid.length && j<grid[0].length && i >= 0&& j>=0  && grid[i][j] != 0){
            return true;
        }
        return false;
    }
    public void dfs(int [][]grid, int row, int col){
        if(isSafe(grid, row, col)){
            grid[row][col] = 0;
            area++;
            dfs(grid,  row+1, col);
            dfs(grid,  row-1,  col);
            dfs(grid,  row, col+1);
            dfs(grid,  row, col-1);
        }
    }
    
}