class MedianFinder {
    private Queue<Integer> minHeap= null;
    private Queue<Integer> maxHeap = null;
    /** initialize your data structure here. */
    public MedianFinder() {
        minHeap = new PriorityQueue<>();
        maxHeap = new PriorityQueue<>((a, b)-> b- a);
    }
    
    public void addNum(int num) {
        if(maxHeap.size() == 0|| maxHeap.peek() >= num){
            maxHeap.offer(num);
        }else{
           minHeap.offer(num);
        }
        balance();
    }
    
    public double findMedian() {
        double median = 0;
        if(maxHeap.size() > minHeap.size()){
            return maxHeap.peek();
        }else if(maxHeap.size() < minHeap.size()){
            return minHeap.peek();
        }else{
            return (maxHeap.peek() + minHeap.peek())/2.0;
        }
    }
    private void balance(){
        if(maxHeap.size() - minHeap.size() > 1){
            minHeap.offer(maxHeap.poll());
        }else if(minHeap.size() - maxHeap.size() > 1){
            maxHeap.offer(minHeap.poll());
        }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
-----------------------------c++------------------------------
class MedianFinder {
public:
    priority_queue<int> maxArr;
    priority_queue<int, vector<int>, greater<int>>minArr; 
    MedianFinder() {
        
    }
    
    void addNum(int num) {
       maxArr.push(num);
       int mxSz = maxArr.size(), mnSz = minArr.size(), diff = mxSz - mnSz;
       if(!maxArr.empty() && mxSz - mnSz > 1){
           minArr.push(maxArr.top());
           maxArr.pop();
       }
       if(minArr.size() > 0 && maxArr.size() > 0 && maxArr.top() > minArr.top()){
           int maxEle = maxArr.top();
           int minEle = minArr.top();
           maxArr.pop();
           minArr.pop();
           minArr.push(maxEle);
           maxArr.push(minEle);
       }
    }
    
    double findMedian() {
        int totalSize = maxArr.size() + minArr.size();
        if(totalSize % 2){
            return maxArr.top();
        }else{
            return (((maxArr.top() + minArr.top()) * 1.0) / 2);
        }
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */