class MedianFinder {
    private Queue<Integer> minHeap= null;
    private Queue<Integer> maxHeap = null;
    /** initialize your data structure here. */
    public MedianFinder() {
        minHeap = new PriorityQueue<>();
        maxHeap = new PriorityQueue<>((a, b)-> b- a);
    }
    
    public void addNum(int num) {
        if(maxHeap.size() == 0|| maxHeap.peek() >= num){
            maxHeap.offer(num);
        }else{
           minHeap.offer(num);
        }
        balance();
    }
    
    public double findMedian() {
        double median = 0;
        if(maxHeap.size() > minHeap.size()){
            return maxHeap.peek();
        }else if(maxHeap.size() < minHeap.size()){
            return minHeap.peek();
        }else{
            return (maxHeap.peek() + minHeap.peek())/2.0;
        }
    }
    private void balance(){
        if(maxHeap.size() - minHeap.size() > 1){
            minHeap.offer(maxHeap.poll());
        }else if(minHeap.size() - maxHeap.size() > 1){
            maxHeap.offer(minHeap.poll());
        }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */