class Solution {
    public String getHint(String secret, String guess) {
        char gess[] = guess.toCharArray();
        char sec[] = secret.toCharArray();
        HashMap<Character, Integer> gessFreq = new HashMap<>();
        HashMap<Integer, Character> gessPos = new HashMap<>();
        for(char c : gess){
            gessFreq.put(c, gessFreq.getOrDefault(c, 0) + 1);
        }
        for(int i = 0; i < gess.length; i++){
            gessPos.put(i, gess[i]);
        }
        HashMap<Character, Integer> secFreq = new HashMap<>();
        HashMap<Integer, Character> secPos = new HashMap<>();
        for(char c : sec){
            secFreq.put(c, secFreq.getOrDefault(c, 0) + 1);
        }
        for(int i = 0; i < sec.length; i++){
            secPos.put(i, sec[i]);
        }
        int bull = 0, cow = 0;
        for(int i = 0 ; i < gess.length; i++){
             char gesChar =  gessPos.get(i);
             char secChar = secPos.get(i);
            if(gesChar == secChar){
                bull++;
                int oldGessFreq = gessFreq.get(gesChar);
                int oldSecFreq = secFreq.get(secChar);
                gessFreq.replace(gesChar, oldGessFreq -1);
                secFreq.replace(secChar, oldSecFreq -1);
            }
        }
        
        for(int i = 0 ; i < gess.length; i++){
             char gesChar =  gessPos.get(i);
             char secChar = secPos.get(i);
             if(secFreq.containsKey(gesChar) && secFreq.get(gesChar) > 0 && gessFreq.get(gesChar) > 0){
                 int oldGessFreq = gessFreq.get(gesChar);
                 int oldSecFreq = secFreq.get(gesChar);
                if(oldGessFreq == oldSecFreq){
                    cow += oldSecFreq;
                    
                     secFreq.replace(gesChar, 0);
                      gessFreq.replace(gesChar, 0);
                }else if(oldGessFreq > oldSecFreq && oldSecFreq >0 && oldGessFreq >0  ){
                    // System.out.println("cow increased because of guess freq is more");
                     cow += oldSecFreq;
                     gessFreq.replace(gesChar, oldGessFreq -oldSecFreq);
                     secFreq.replace(gesChar, 0);
                }else if(oldGessFreq < oldSecFreq && oldSecFreq!=0 && oldGessFreq >0){
                    // System.out.println("cow increased because of secret freq is more");
                    cow += oldGessFreq;
                    secFreq.replace(gesChar, oldSecFreq - oldGessFreq);
                      gessFreq.replace(gesChar, 0);
                }
            }
        }     
        StringBuilder sb = new StringBuilder();
        sb.append(bull);
        sb.append('A');
        sb.append(cow);
        sb.append('B');
        return sb.toString();
    }
}