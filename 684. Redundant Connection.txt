class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        int totalEdges = edges.length;
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for(int i = 1; i<=totalEdges; i++){
            map.put(i, new HashSet<>());
        }
        for(int edge[]: edges){
            if(dfs(new HashSet<>(), map, edge[0], edge[1])) return edge;
            map.get(edge[0]).add(edge[1]);
            map.get(edge[1]).add(edge[0]);
        }
        return null;
    }
    public boolean dfs(Set<Integer> visited, Map<Integer, Set<Integer>> map, int source, int target){
        if(source == target){
            return true;
        }
        visited.add(source);
        for(int u : map.get(source)){
            if(!visited.contains(u)){
                if(dfs(visited, map, u, target)){
                    return true;
                }
            }
        }
        return false;
    }
}