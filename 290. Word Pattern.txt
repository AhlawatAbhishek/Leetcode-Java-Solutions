//Time complexity: O(pattern.length())
//Space complexity: O(distinct strings s), since pToC map can only have 26 key-value pairs
class Solution {
    public boolean wordPattern(String pattern, String s) {
        HashMap<Character, String> patToS = new HashMap<>();
        HashMap<String, Character> sToPat = new HashMap<>();
        String strs[] = s.split(" ");
        int len = pattern.length();
        if(len != strs.length)return false;
        for(int indx = 0; indx<len; indx++){
            char cPat = pattern.charAt(indx);
            String str = strs[indx];
            if(patToS.containsKey(cPat)){
                if(!patToS.get(cPat).equals(str)){
                    // System.out.println("returning false for"+cPat+ " " + str + " " + indx);
                    return false;
                }    
            }else{
                patToS.put(cPat, str);
            }
            if(sToPat.containsKey(str)){
                if(sToPat.get(str) != cPat){
                    // System.out.println("returning false for"+cPat+ " " + str + " " + indx);
                    return false;
                }
            }else{
                
                sToPat.put(str, cPat);
            }
        }
        return true;
    }
}
--------------------------------------------------------------------------
// You can, but then you need to modify line 19 to !map_index.get(c).equals(map_index.get(w)).
// This is because if you use primitive int as a key/value for generic map, java will convert it into Integer then save the converted Integer into map, and "==" or "!=" only works for Integer whos value is below 127.
//Time complexity: O(pattern.length())
//Space complexity: O(distinct strings s), since pToC map can only have 26 key-value pairs
class Solution {
    public boolean wordPattern(String pattern, String s) {
        HashMap indxMp = new HashMap();
        String strs[] = s.split(" ");
        int len = pattern.length();
        if(len != strs.length)return false;
        for(Integer indx = 0; indx<len; indx++){
            char cPat = pattern.charAt(indx);
            String str = strs[indx];
            if(!indxMp.containsKey(cPat))indxMp.put(cPat, indx);
            if(!indxMp.containsKey(str))indxMp.put(str, indx);
            if(indxMp.get(cPat) != indxMp.get(str)){
                    return false;
            }       
        }
        return true;
    }
}