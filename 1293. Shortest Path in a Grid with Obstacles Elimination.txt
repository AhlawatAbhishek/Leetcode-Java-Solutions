class Solution {
    int dp[][][][] = null;
    int minSteps = Integer.MAX_VALUE;
    public int shortestPath(int[][] grid, int k) {
        dp = new int[grid.length][grid[0].length][41*41][k+1];
        for(int arr1[][][] : dp){
            for(int arr2[][] : arr1){
                for(int arr3[] : arr2){
                    Arrays.fill(arr3, -1);
                }
            }
        }
         dfs(grid, 0, 0, 0, k, k);
        return minSteps == Integer.MAX_VALUE ? -1 : minSteps;
    }
    public int dfs(int [][]grid, int r, int c, int steps,int ele, int k){
        if(r <0 || r>=grid.length || c<0 || c>= grid[0].length || grid[r][c] == 2 || (grid[r][c] == 1&&ele<=0)){
            return Integer.MAX_VALUE;
        }
        if(dp[r][c][steps][ele] != -1){
            minSteps = Math.min(minSteps,dp[r][c][steps][ele]);
            return dp[r][c][steps][ele];
        }
        if(r == grid.length-1 && c == grid[0].length-1){
            minSteps = Math.min(steps, minSteps);
            return minSteps;
        }
        boolean isDecre = false;
        if(grid[r][c] == 1){
            ele--;
            isDecre = true;
        }
        int temp = grid[r][c];
        grid[r][c] = 2;
       int down = dfs(grid, r+1, c, steps+1, ele, k);
       int right = dfs(grid, r, c+1, steps+1, ele, k);
       int up = dfs(grid, r-1, c, steps+1, ele, k);
       int left = dfs(grid, r, c-1, steps+1, ele, k);
       int min = Math.min(Math.min(left,right), Math.min(up, down));
       dp[r][c][steps][ele] = min;
        if(isDecre){
            ele++;
        }
        grid[r][c] = temp;
        return dp[r][c][steps][ele];
    }
}
-------------------------------------------------
class Solution {
    public int shortestPath(int[][] grid, int k) {
//         
        int dirs[][] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
        int m = grid.length, n = grid[0].length;
        if(m == 0 || n == 0) return 0;
        boolean visited[][] = new boolean[m][n];
        int hurdles[][] = new int[m][n], steps = 1;
        hurdles[0][0] = grid[0][0];
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{0, 0, grid[0][0]});
        while(!queue.isEmpty()){
            int size = queue.size();
          while(size-->0){  
            int presentCell[] = queue.poll();
            int currHurdle = presentCell[2];
            int x = presentCell[0], y = presentCell[1];
            if(x == m-1 && y == n-1){
                return steps-1;
            }
            for(int dir[] : dirs){
                int X = x + dir[0];
                int Y = y + dir[1];
                if(X < 0 || Y < 0 || X >= m || Y >= n){
                    continue;
                }
                int oldHurdle = hurdles[X][Y];
                int newHurdle = currHurdle + grid[X][Y];
                if(!(visited[X][Y]) && newHurdle <= k){
                    hurdles[X][Y] = newHurdle;
                    queue.offer(new int[]{X, Y, newHurdle});
                    visited[X][Y] = true;
                }
                if((newHurdle < oldHurdle) && (newHurdle <= k)){
                     hurdles[X][Y] = newHurdle;
                    queue.offer(new int[]{X, Y, newHurdle});
                }
            }
          }   
            steps++;
        }
        return -1;
    }
}