/*[[1,3],[2,6],[8,10],[15,18]]
[[1,4],[4,5]]
[[1,3]]
[[1,4],[5,6]]
[[2,3],[4,5],[6,7],[8,9],[1,10]]
[[5,5],[1,3],[3,5],[4,6],[1,1],[3,3],[5,6],[3,3],[2,4],[0,0]]*/
------------------------------------------------post link-https://leetcode.com/problems/merge-intervals/discuss/1644279/Java-or-Sorting-or-Handwritten-Illustrations-and-Easy-to-understand-%3A)
/*
 org :             [[0,0],[1,2],[5,5],[2,4],[3,3],[5,6],[5,6],[4,6],[0,0],[1,2],[0,2],[4,5]]
sorted Inter: [0,0] [0,0] [0,2] [1,2] [1,2] [3,3] [2,4] [4,5] [5,5] [4,6] [5,6] [5,6] 
prevInter:          [0,0] [0,0] [0,2] [0,2] [0,2] [3,3] [0,4] [0,5] [0,5] [0,6] [0,6] [0,6]  
*/
-------------------------------------------
//Time complexity: O(n*log(n)), n is length of intervals array.
//Auxiliary space: O(n), for storing the resultant intervals, in worst case there would be no overlapping.
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length == 1) return intervals;
        Arrays.sort(intervals, (a, b)-> {
            if(a[1] == b[1]){
                return a[0]-b[0];
            }else{
                return a[1] - b[1];
            }
        });
      
        ArrayList<int[]> res = new ArrayList<>();
        
         int prevIntr[] = intervals[0], prevStrt = prevIntr[0], prevEnd = prevIntr[1];
        for(int intrIndx = 1; intrIndx<intervals.length; intrIndx++){
            
            int currIntr[] = intervals[intrIndx], currStrt = currIntr[0], currEnd = currIntr[1];
            if(currStrt <= prevEnd){
//accounting for the wrong insertions in result till now and getting the actual interval that overlaps with the current   
               while(res.size() > 0 && res.get(res.size()-1)[1] >= currStrt){
                   prevStrt = Math.min(res.get(res.size()-1)[0], prevStrt);
                   prevEnd = Math.max(res.get(res.size()-1)[1], prevEnd);
                   res.remove(res.size()-1);
               } 
                 
                int mrgStrt = Math.min(currStrt, prevStrt);
                int mrgEnd = Math.max(currEnd, prevEnd);
                prevEnd = mrgEnd;
                prevStrt = mrgStrt;
                
            }else{
                
                res.add(new int[]{prevStrt, prevEnd});
                prevEnd = currEnd;
                prevStrt = currStrt;
            }
        }

         res.add(new int[]{prevStrt, prevEnd});
        return res.toArray(new int[0][0]);
    }
}
--------------------------------------------
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        LinkedList<int[]> merged = new LinkedList<>();
        for (int[] interval : intervals) {
            // if the list of merged intervals is empty or if the current
            // interval does not overlap with the previous, simply append it.
            if (merged.isEmpty() || merged.getLast()[1] < interval[0]) {
                merged.add(interval);
            }
            // otherwise, there is overlap, so we merge the current and previous
            // intervals.
            else {
                merged.getLast()[1] = Math.max(merged.getLast()[1], interval[1]);
            }
        }
        return merged.toArray(new int[merged.size()][]);
    }
}