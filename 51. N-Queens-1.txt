class Solution {
    private List<List<String>> res = new ArrayList<>();
    public List<List<String>> solveNQueens(int n) {
        int board[][] = new int[n][n];
        for(int c = 0; c<n; c++){
            board[0][c] = 1;
            fillBoard(0, c, board, n);
            board[0][c] = 0;
        }
        return res;
    }
    private List<String> buildBoard(int board[][], int n){
           List<String> row = new ArrayList<>();
           for(int r = 0; r<n; r++){
            StringBuilder rr = new StringBuilder();
            for(int c = 0; c<n; c++){
                if(board[r][c] == 1){
                    rr.append("Q");
                }else{
                    rr.append(".");
                }
            }
            row.add(rr.toString());   
         }
         return row;
    }
    private boolean fillBoard(int row, int col, int board[][], int n){
        boolean isFound = false;
        if(isSafe(board, row, col, n)){
            if(row == n-1){
                res.add(buildBoard(board, n));
                return true;  
            } 
            for(int c = 0; c<n; c++){
                Arrays.fill(board[row+1], 0);
                board[row+1][c] = 1;
                if(fillBoard(row+1, c, board, n)){
                    isFound = true;
                }
                board[row+1][c] = 0;
            }
        }
        return isFound;
    }
    private boolean isSafe(int board[][], int r, int c, int n){
        //up
        for(int row = r; row>=0; row--){
            if(row == r) continue;
            if(board[row][c] == 1){
                return false;
            }
        }
        //diagonally right - up
        for(int row = r, col = c; row>= 0 && col<n; row--, col++){
            if(row == r && col == c) continue;
            if(board[row][col] == 1){
                return false;
            }
        }
        //diagonally left - up
        for(int row = r, col = c; row>= 0 && col>=0; row--, col--){
            if(row == r && col == c) continue;
            if(board[row][col] == 1){
                return false;
            }
        }
        return true;
    }
}