class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
               List<List<Integer>> res = new ArrayList<>();

        if (candidates.length == 0 || candidates == null) {
           return  res;
       }
        Arrays.sort(candidates);
         List<Integer> r = new ArrayList<>();
         find(candidates, target, r, res, 0);
        return res;
    }
    public void find(int candidates[], int target, List<Integer> r, List<List<Integer>> res, int si){
        if(target < 0){
            return;
        }
        if(target  == 0){
            res.add(new ArrayList<>(r));
            return;
        }
        for(int i = si;i<candidates.length;i++){
           if(target<candidates[i]){
               break;
           }
           r.add(candidates[i]);
            find(candidates, target-candidates[i], r, res,i);
            r.remove(r.size()-1);
        }
    }
}