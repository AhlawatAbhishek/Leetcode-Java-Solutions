class Solution {
    public int largestIsland(int[][] grid) {
         if(grid == null || grid.length == 0) return 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        int n = grid.length, m = grid[0].length, islandId = 2, maxArea = Integer.MIN_VALUE;
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(grid[i][j] == 1){
                   int size = dfs(grid, i, j, islandId);
                    maxArea = Math.max(maxArea, size);
                     map.put(islandId, size);
                    islandId++;
                }
            }
        }
        int dir[][] = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};
        for(int i = 0; i<n; i++){
            for(int j = 0; j<m; j++){
                if(grid[i][j] == 0){
                  HashSet<Integer> set = new HashSet<>();
                    for(int cor[] : dir){
                         int x = cor[0] + i;
                        int y = cor[1] + j;
                        if(x > -1 && y > -1 && x < n && y < m && grid[x][y] != 0){
                            set.add(grid[x][y]);
                        }
                    }
                    int sum = 1;
                   if(set.size() > 0){ 
                    for(int id : set){
                        sum += map.get(id);
                    }
                   }    
                    maxArea = Math.max(maxArea, sum);
                }
            }
        }
        
        return maxArea;
    }
    public int dfs(int grid[][], int row, int col, int islandId){
        if(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length || grid[row][col] != 1){
            return 0;
        }
        grid[row][col] = islandId;
        return dfs(grid, row+1, col, islandId)+
        dfs(grid, row-1, col, islandId)+
        dfs(grid, row, col+1, islandId)+
        dfs(grid, row, col-1, islandId)+1;
    }
}