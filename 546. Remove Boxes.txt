class Solution {
    public int removeBoxes(int[] boxes) {
        int size = boxes.length;
        int memo[][][] = new int[size][size][size];
        return dfs(boxes, 0, size-1, memo, 0);
    }
    public int dfs(int boxes[], int left, int right, int memo[][][], int streak){
        if(left > right){
            return 0;
        }else if(left == right){
            return (streak+1)*(streak + 1);
        }else if(memo[left][right][streak] != 0){
            return memo[left][right][streak];
        }else{
            int max = (streak + 1)*(streak + 1) + dfs(boxes, left+1, right, memo, 0);
            for(int i = left+1; i<=right; i++){
                if(boxes[left] == boxes[i]){
                    max = Math.max(max, dfs(boxes, left+1, i-1, memo, 0) + dfs(boxes, i, right, memo, streak+1));
                }
            }
            return memo[left][right][streak] = max;
        }
    }
}