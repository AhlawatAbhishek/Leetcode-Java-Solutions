class Solution {
    public int largestRectangleArea(int[] heights) {
         if(heights.length == 0){
             return 0;
         }
        if(heights.length == 1){
            return heights[0];
        }
        int max = 0;
        Stack<Integer> st = new Stack<>();
        st.add(0);
        for(int i = 0;i < heights.length; i++){
            int curr = heights[i];
            if(curr >= heights[st.peek()]){
                st.push(i);
            }else{
                    while(!st.isEmpty() && curr<heights[st.peek()]){
                        int temp = heights[st.pop()];
                        if(st.isEmpty()){
                            max = Math.max(max, temp * i);
                        }else{
                            max = Math.max(max, temp*(i-st.peek() -1));
                        }
                    }
                st.push(i);
            }
        }
        if(!st.isEmpty()){
            int i = heights.length;
            while(!st.isEmpty()){
                int temp = heights[st.pop()];
                if(st.isEmpty()){
                    max = Math.max(max, temp * i);
                }else{
                            max = Math.max(max, temp*(i-st.peek() -1));
                     }
              }             
            }
        return max;
    }
}