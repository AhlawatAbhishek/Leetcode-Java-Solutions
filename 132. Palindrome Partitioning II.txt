class Solution {
    public int minCut(String s) {
        int n = s.length();
        boolean[][] isPalindrome = populate(s, n);
        int totalCuts[] = new int[n];
        for(int j = 0; j<n; j++){//J accounts for addition of new word
            int minCuts = j; //maxCutsAllowedAtThisPoint
            for(int i = 0; i<=j; i++){
                if(isPalindrome[i][j]){
                    minCuts = i == 0 ? 0 : Math.min(minCuts, totalCuts[i-1]+1);
                }
            }
            totalCuts[j] = minCuts;
        }
        return totalCuts[n-1];
    }
    boolean [][] populate(String s, int n){
        boolean[][] isPalindrome = new boolean[n][n];
        for(int i = n-1; i>=0; i--){
            for(int j = i; j<n; j++){
                if(s.charAt(i) == s.charAt(j) && (j-i <= 2 || isPalindrome[i+1][j-1])){
                    isPalindrome[i][j] = true;
                }
            }
        }
        return isPalindrome;
    }
}