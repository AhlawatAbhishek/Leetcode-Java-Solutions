class Solution {
    public String removeDuplicates(String s, int k) {

        Stack<Pair<Character, Integer>> st = new Stack<>();
         for(int i = 0; i<s.length(); i++){
                  char c = s.charAt(i);
//              if stack is not empty and last character is same as current character
            if(!st.isEmpty() && st.peek().getKey() == c){
//                 Updating previous frequency of charcter
                Pair<Character, Integer> p = new Pair<>(c , st.peek().getValue() + 1);
                st.pop();
//                 Inserting updated frequency pair
                st.push(p);
//              checking if current frequency is equal to k if equal then remove then pair                  
                if(st.peek().getValue() == k){             
                        st.pop();
                 }
            }else{//if stack is empty or last character is not same as current character
                Pair<Character, Integer> p = new Pair<>(c, 1);
                st.push(p);           
            }
        }  
        // if there is nothing left in the stack, return empty string
        if(st.isEmpty()){
            return "";
        }
//         building answer in case stack is not empty
        StringBuilder answer = new StringBuilder();
        while(!st.isEmpty()){
            Pair<Character, Integer> p = st.pop();
            int count = p.getValue();
//             appending char of pair its frequency times to answer
            while(count-->0)answer.append(p.getKey());
        }     
//         reversing answer before returning as storing in stack causes answer to be reversed
        return answer.reverse().toString();
    }
}
--------------------------------c++---------------
#define ar array
#define ll long long
#define ld long double
#define sza(x) ((int)x.size())
#define all(a) (a).begin(), (a).end()
#define pii pair<int, int>
#define pll pair<ll, ll>
#define Vc vector
#define pb push_back
#define ppb pop_back
#define ff first
#define ss second
#define nl "\n"
#define  lb lower_bound
#define  ub upper_bound
#define fo(i ,a, b) for(ll i = a; i < b ; i++)
#define rFo(i, b, a) for(ll i = b; i>=a; i--)

class Solution {
public:
    string removeDuplicates(string s, int k) {
         stack<pair<char, int>> st;
         fo(indx, 0, sza(s)){
             if(st.empty() || st.top().ff != s[indx]){
                     // cout<<s[indx]<<" pushed with freq "<<1<<nl;
                 st.push({s[indx], 1});
             }else{
                 ll cnt = 0;
                 // cout<<"st top is "<<st.top().ff<<" and curr is: "<<s[indx]<<nl; 
                 while(indx < sza(s) && s[indx] == st.top().ff && cnt + st.top().ss < k){
                     cnt++;
                     indx++;
                 }
                 indx--;
                 if(cnt+st.top().ss < k){
                     ll total = st.top().ss + cnt;
                     st.pop();
                     // cout<<s[indx]<<" pushed with freq "<<total<<nl;
                     st.push({s[indx], total});
                 }else if(cnt > 0){
                     // cout<<s[indx]<<" gone"<<" and cnt is"<<cnt <<nl;
                     st.pop();
                 }
             }
         }
         string ans = "";
         while(!st.empty()){
             ll freq = st.top().ss;
             while(freq-->0){
                 ans += st.top().ff;
             }
             st.pop();
         }
        reverse(all(ans));
        return ans;
    }
};
