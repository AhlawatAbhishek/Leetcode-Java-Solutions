/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     HashSet<Integer> set = new HashSet<>();
    public boolean findTarget(TreeNode root, int k) {
        return pairExists(root, k);
    }
    private boolean pairExists(TreeNode root, int k){
        if(root == null) return false;
        boolean doesExist = set.contains(k-root.val);
         set.add(root.val);
        doesExist = doesExist ||  pairExists(root.left, k) || pairExists(root.right, k);
        return doesExist;
    }
}
-------------------------C++--------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(root->left == NULL && root->right == NULL)return false;
        traverse(root);
        // cout<<"set size is "<<vals.size()<<endl;
        return isPoss(root, k);
    }
private:
    set<int> vals;
    void traverse(TreeNode* root){
        if(root == NULL)return;
        vals.insert(root->val);
        traverse(root->left);
        traverse(root->right);
    }
    bool isPoss(TreeNode *root, int k){
        if(root == NULL)return false;
        return (root->val != k/2 && vals.find((k - root->val)) != vals.end()) ||  isPoss(root->left, k) || isPoss(root->right, k);
    }
};