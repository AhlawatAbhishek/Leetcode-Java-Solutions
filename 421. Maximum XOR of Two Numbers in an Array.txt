class Solution {
    public int findMaximumXOR(int[] nums) {
         if(nums.length == 0 || nums.length == 1){
             return 0;
         }
        ArrayList<Integer> al = new ArrayList<>();
        getSubArray(al, new ArrayList<Integer>(), 0, nums);
        int max = Integer.MIN_VALUE;
        for(int a : al){
            if(max < a){
              max = a;
            }
        }
        return max;
    }
    public void getSubArray(ArrayList<Integer>sub, ArrayList<Integer> curr, int index, int[] arr){
        if(curr.size() == 2){
            int x = curr.get(0) ^ curr.get(1);
            sub.add(x);
            return;
        }
        for( int i = index; i<arr.length; i++){
            curr.add(arr[i]);
            getSubArray(sub, curr, i + 1, arr);
            curr.remove(curr.size()-1);
        }
    }
}-------------
correct : ------------
class Solution {
    public int findMaximumXOR(int[] nums) {
        int mask = 0 , max= 0;
        for(int i = 31; i >= 0;i--){
            mask = mask | (1<<i);
            Set<Integer> set = new HashSet();
            for(int num : nums){
                set.add(mask & num);
            }
            int temp = max | ( 1<<i);
            for(int prefix : set){
                if(set.contains(temp ^ prefix)){
                    max = temp;
                    break;
                }
            }
        }
        return max;
    }
}
--------------------------------------------------------------------
class Solution {
    public int findMaximumXOR(int[] nums) {
       int maxNum = nums[0];
       for(int num : nums){
           maxNum = Math.max(num, maxNum);
       }
       Set<Integer> set = new HashSet<>(); 
       int maxXOR = 0, mask = 0, L = Integer.toBinaryString(maxNum).length(); 
       for(int len = L-1; len>=0; len--){
           mask |= (1<<len);
           set.clear();
           for(int num : nums){
               set.add(num & mask);
           }
           int currXOR = maxXOR | (1<<len);
           for(int ele : set){
               if(set.contains(currXOR ^ ele)){
                   maxXOR =currXOR;
                   break;
               }
           }
       } 
       return maxXOR;
    }
}
-----------------------------------------------------------------------------------
class TrieNode{
    TrieNode children[] = null;
    TrieNode(){
        children = new TrieNode[2];
    }
}
class Solution {
    private TrieNode root = new TrieNode();
    public int findMaximumXOR(int[] nums) {
        for(int num : nums){
            insert(num);
        }
        int maxXor = 0;
        for(int num : nums){
            maxXor = Math.max(maxXor, findMaxXor(num)^num);
        }        
        return maxXor;
    }
    private void insert(int num){
        TrieNode curr = root;
        for(int bits = 31; bits>=0; bits--){
            int setBit = (num & (1<<bits)) == 0 ? 0 : 1;
            if(curr.children[setBit] == null){
                curr.children[setBit] = new TrieNode();
            }
            curr = curr.children[setBit];
        }
    }
    private int findMaxXor(int num){
        int max = 0;
        TrieNode curr = root;
        for(int bits = 31; bits>=0; bits--){
            int setBit = (num & (1<<bits)) == 0 ? 0 : 1;
            int wantedBit = 0, notWantedBit = 0;
            if(setBit == 0){
                wantedBit = 1;
            }else{
                notWantedBit = 1; 
            }
            if(curr.children[wantedBit] != null){
                if(wantedBit == 1)max |= (1<<bits); 
                curr = curr.children[wantedBit];
            }else{
                if(notWantedBit == 1)max |= (1<<bits);
                curr = curr.children[notWantedBit];
            }
        }
        return max;
    }
    
}