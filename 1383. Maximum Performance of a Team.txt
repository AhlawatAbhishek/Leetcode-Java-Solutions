class Emp{
    int speed, eff;
    Emp(int s, int e){
        speed = s;
        eff = e;
    }
}
class Solution {
    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
        Emp []eArr = new Emp[speed.length];
        for(int i = 0; i<eArr.length; i++){
            Emp e = new Emp(speed[i], efficiency[i]);
            eArr[i] =e;
        }
        Arrays.sort(eArr, (a,b)->b.eff - a.eff);
        long totalSpeed = 0, maxPerf = 0;
        Queue<Emp> queue = new PriorityQueue<>((a, b)->a.speed - b.speed);
        for(int i = 0; i<eArr.length; i++){
            if(queue.size() == k){
                Emp emp = queue.poll();
                totalSpeed -= emp.speed;
            }
            totalSpeed += eArr[i].speed; 
            long currPerf = 0;
            currPerf += totalSpeed * eArr[i].eff;
            maxPerf = Math.max(maxPerf, currPerf);
            queue.offer(eArr[i]);
        }
        return (int)(maxPerf%1000000007);
    }
}