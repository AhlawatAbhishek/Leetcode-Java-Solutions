class Solution {
    public int bitwiseComplement(int N) {
        if(N == 1){
            return 0;
        }
        if(N == 0){
            return 1;
        }
        int result = 0;
        int power = 1;
        while(N>0)
        {
            result += (N % 2 ^ 1) * power;
            power <<= 1; //mulitply by 2;
            N >>= 1; // divide by 2
        }
        return result;
    }
}----------------------------------------------------------------------------------
----------------------------------------------------------
class Solution {
    public int bitwiseComplement(int n) {
        int bitLen = (int) (Math.log(n)/Math.log(2)) + 1;
        int mask = (1<<bitLen)-1;
        return n ^ mask;
    }
}
class Solution {
    public int bitwiseComplement(int n) {
        int firstSetBitPos = (int) (Math.log(n)/Math.log(2));
        int mask = 1;
        while(firstSetBitPos >= 0){
            mask |= (1<<firstSetBitPos--);
        }
        return n ^ mask;
    }
}
--------------------------------------------------------
The idea is to create the same 1-bits bitmask by propagating the highest 1-bit into the lower ones.
--------------------------------------------------------
class Solution {
  public int bitwiseComplement(int N) {
    if (N == 0) return 1;
    // bitmask has the same length as N and contains only ones 1...1
    int bitmask = N;
    bitmask |= (bitmask >> 1);
    bitmask |= (bitmask >> 2);
    bitmask |= (bitmask >> 4);
    bitmask |= (bitmask >> 8);
    bitmask |= (bitmask >> 16);
    // flip all bits 
    return bitmask ^ N;
  }
}