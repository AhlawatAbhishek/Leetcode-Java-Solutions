Same time complexity: O(n+m) and space complexity : O(1)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null){
            return null;
        }
        int lenA = 0, lenB = 0;
        ListNode tempA = headA, tempB = headB;
        while(tempA != null){
            lenA++;
            tempA = tempA.next;
        }
        while(tempB != null){
            lenB++;
            tempB = tempB.next;
        }
        if(lenA == lenB){
            ListNode tempAA = headA, tempBB = headB;
            while(tempAA != null && tempBB != null){
                if(tempAA == tempBB){
                    return tempAA;
                }
                tempAA = tempAA.next;
                tempBB = tempBB.next;
            }
        }else if(lenA > lenB){
            ListNode tempAA = headA, tempBB = headB;
            for(int i = 1; i<=lenA-lenB; i++){
               tempAA = tempAA.next;  
            }
            while(tempAA != null && tempBB != null){
                if(tempAA == tempBB){
                    return tempAA;
                }
                tempAA = tempAA.next;
                tempBB = tempBB.next;
            }
        }else if(lenA < lenB){
            ListNode tempAA = headA, tempBB = headB;
            for(int i = 1; i<=lenB-lenA; i++){
               tempBB = tempBB.next;  
            }
            while(tempAA != null && tempBB != null){
                if(tempAA == tempBB){
                    return tempAA;
                }
                tempAA = tempAA.next;
                tempBB = tempBB.next;
            }
        }
        return null;
    }
}
------------------
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
      int lenA=0;
        ListNode tempA = headA;
        while(tempA != null){
            lenA++;
            tempA = tempA.next;
        }
        
       
        int lenB=0;
        ListNode tempB = headB;
        while(tempB != null){
            lenB++;
            tempB = tempB.next;
        }
        
        int diff = Math.abs(lenA-lenB);
        
      
        tempA=headA;
        tempB=headB;
        
        if(lenA > lenB) {
            while(diff-- > 0)
                tempA = tempA.next;
        }
        else {
            while(diff-- > 0)
                tempB = tempB.next;
        }
        
     
        while(tempA != tempB){
            tempA = tempA.next;
            tempB = tempB.next;
            if(tempA == null || tempB == null)
                return null;
        }
        return tempA;
    }
}
-----------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null){
            return null;
        }
       ListNode tempA = headA, tempB = headB;
       while(tempA != tempB){
           tempA = tempA != null ? tempA.next : headB;
           tempB = tempB != null ? tempB.next : headA;
       } 
       return tempA;
    }
}