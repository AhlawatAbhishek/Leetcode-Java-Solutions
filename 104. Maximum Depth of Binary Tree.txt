/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
       int left =  maxDepth(root.left);
       int right = maxDepth(root.right);
       int res = Math.max(left, right)  + 1;
       return res; 
    }
}---------------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null){
           return 0;
        }
        int left_depth = 0, right_depth = 0;
        left_depth = 1 + maxDepth(root.left);
        right_depth = 1 + maxDepth(root.right);
        return Math.max(left_depth, right_depth);
    }
}
--------------------------------------
14-02-22---
-----------------------------c++------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    unordered_map<TreeNode*, int> memo;
public:
    int maxDepth(TreeNode* root) {
        return findDepth(root);
    }
private:
    int findDepth(TreeNode *root){
        if(root == NULL){
            return 0;
        }
        if(memo.find(root) != memo.end()){
            return memo[root];
        }
        int depth = max(findDepth(root->left), findDepth(root->right)) + 1;
        memo[root] = depth; 
        return depth;
    }
};
-----------------------
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == NULL) return 0;
        stack<TreeNode *> st;
        stack<int> depths;
        depths.push(0);
        int depth = 0;
        st.push(root);
        while(!st.empty()){
            TreeNode * currNode = st.top();
            int currDepth = depths.top();
            st.pop();
            depths.pop();
            if(currNode != NULL){    
                st.push(currNode->right);
                st.push(currNode->left);
                depth = max(currDepth+1, depth);
                depths.push(currDepth+1);
                depths.push(currDepth+1);
            }    
            
        }    
        return depth;
    }
};
-------------------------java------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null){
            return 0;
        }
        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}
-----------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
      if(root == null) return 0;
      Queue<TreeNode> queue = new LinkedList<>();
      int depth = 0;
      queue.offer(root);
      while(!queue.isEmpty()){
          depth++;
          int size = queue.size();
          while(size-->0){
            TreeNode currNode = queue.poll();
            if(currNode.left != null)queue.offer(currNode.left);
            if(currNode.right != null)queue.offer(currNode.right);
          }    
      }
      return depth;  
    }
}