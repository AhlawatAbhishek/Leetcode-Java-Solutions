//Deshi Solution
class State{
    int lDist = Integer.MAX_VALUE, rDist = Integer.MAX_VALUE;
    boolean lTending, rTending;
}
class Solution {
    public String pushDominoes(String dominoes) {
        State[] states = new State[dominoes.length()];
        for(int i = 0; i<states.length; i++){
           states[i] = new State();
        }
        char ch[] = dominoes.toCharArray();
        for(int i = 0; i<states.length; i++){
            if(ch[i] == 'R'){
                states[i].rDist = 0;
                states[i].rTending = true;
            }else if(ch[i] == '.'){
                if(i > 0){
                   if(states[i-1].rDist != Integer.MAX_VALUE) states[i].rDist = states[i-1].rDist+1;
                        if(states[i].rDist != Integer.MAX_VALUE && states[i].rDist >= 0){
                            states[i].rTending = true;
                        }
                }
            }
        }
        for(int i = states.length-1; i>=0; i--){
            if(ch[i] == 'L'){
                states[i].lDist = 0;
                states[i].lTending = true;
            }else if(ch[i] == '.'){
                if(i < states.length-1){
                    if(states[i+1].lDist != Integer.MAX_VALUE) states[i].lDist = states[i+1].lDist+1;
                    if(states[i].lDist != Integer.MAX_VALUE &&  states[i].lDist >= 0){
                        states[i].lTending = true;
                    }
                }
            }
        }
        for(int i = 0; i<states.length; i++){
            if(states[i].rTending && states[i].lTending){
                if(states[i].lDist < states[i].rDist){
                    states[i].rTending = false;
                }else if(states[i].lDist > states[i].rDist){
                    states[i].lTending = false;
                }else{
                    states[i].rTending = false;
                    states[i].lTending = false;
                }
            }
        }
        for(int i =0; i<states.length; i++){
            if(states[i].lTending){
                ch[i] = 'L';
            }else if(states[i].rTending){
                ch[i] = 'R';
            }
        }
        return new String(ch);
    }
}
---------------------------------------------
//Videshi solution
class Solution {
  public String pushDominoes(String dominoes) {
    int n = dominoes.length();
    int[] left = new int[n];
    int nearestLeftIndex = -1;
    for(int i=n-1;i>=0;i--){
      char c = dominoes.charAt(i);
      if(c == 'L'){
        nearestLeftIndex = i;
      }
      else if(c == 'R'){
        nearestLeftIndex = -1;
      }
      left[i] = nearestLeftIndex;
    }

    int[] right = new int[n];
    int nearestRigtIndex = -1;
    for(int i=0;i<n;i++){
      char c = dominoes.charAt(i);
      if(c == 'L'){
        nearestRigtIndex = -1;
      }
      else if(c == 'R'){
        nearestRigtIndex = i;
      }
      right[i] = nearestRigtIndex;
    }
    char[] ans = new char[n];
    for(int i=0;i<n;i++){


      if(dominoes.charAt(i) == '.'){
        int nearestLeft = left[i];
        int nearestRight = right[i];

        int leftDiff = nearestLeft == -1 ? Integer.MAX_VALUE : Math.abs(nearestLeft  - i);
        int rightDiff = nearestRight == -1 ? Integer.MAX_VALUE : Math.abs(nearestRight  - i);

        if(leftDiff == rightDiff){
          ans[i] = '.';
        } else if(leftDiff < rightDiff){
          ans[i] = 'L';
        } else if(leftDiff > rightDiff){
          ans[i] = 'R';
        }
      } else {
        ans[i] = dominoes.charAt(i) ;
      }

    }
    return new String(ans);
  }
}