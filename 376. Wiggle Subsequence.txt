class Solution {
    public int wiggleMaxLength(int[] nums) {
       ArrayList<ArrayList<Integer>> al = new ArrayList<>();
        getSS(nums, 0, al, new ArrayList<Integer>());
        int max  =0;
        System.out.println(al);
        Collections.sort(al, (a, b) -> b.size() - a.size());
        for(ArrayList<Integer> li : al){
            if(max >= li.size()){
                continue;
            }
            int len = lengthOfWrigleSequence(li);
            max = Math.max(max, len);
        }
        return max;
    }
    public void getSS(int nums[], int index, ArrayList<ArrayList<Integer>> res, ArrayList<Integer> curr){
        if(curr.size() > 0){
            if(!res.contains(curr))res.add(new ArrayList<Integer>(curr));
        }
        for(int i = index; i<nums.length; i++){
         
            getSS(nums, i+1, res, curr);
               curr.add(nums[i]);
            getSS(nums, i + 1, res, curr);
            curr.remove(curr.size()-1);
        }
    }
    public int lengthOfWrigleSequence(ArrayList<Integer> nums){
         // if(nums.size() <= 2){
         //     return 1;
         // }
        boolean isPositive = false;
        int count = 1, max = 1;
        for(int i = 1; i<nums.size(); i++){
           int d = nums.get(i) - nums.get(i-1);
            if(d == 0){
                count = 0;
                continue;
            }
            if(i == 1){
                count++;
                max = Math.max(max , count);
                if(d>0){
                    isPositive = true;
                }else{
                    isPositive = false;
                }
                continue;
            }
            if(d>0){
                if(isPositive){
                    count = 0;
                }else{
                    count++;
                    max = Math.max(max, count);
                    isPositive = true;
                }
            }else if(d < 0){
                if(!isPositive){
                    count = 0;
                }else{
                    count++;
                    max = Math.max(max, count);
                    isPositive = false;
                }
            }
        }
        return max;
    }
}
------------------------
this is correct solution which donot gives tle

class Solution {
    public int wiggleMaxLength(int[] nums) {
        if(nums.length <= 1){
            return nums.length;
        }
        int up = 1, down = 1;
        
        for(int i = 1; i < nums.length; i++){
            if(nums[i-1] < nums[i]){
                up = down+1;
            }else if(nums[i-1] > nums[i]){
                down = up + 1;
            }
        }
        return Math.max(up, down);
    }
}