class Solution {
    public int findPairs(int[] nums, int k) {
        Arrays.sort(nums);
        int pairCnt = 0;
        for(int indx = 0; indx<nums.length; indx++){
            if(indx>0 && nums[indx] == nums[indx-1])continue;
            for(int ind = indx + 1; ind<nums.length; ind++){
                if(ind > indx+1 && nums[ind] == nums[ind-1])continue;
                if(Math.abs(nums[indx]-nums[ind]) == k){
                    pairCnt++;
                }
            }
        }
        return pairCnt;
    }
}
----------------------------------------------c++-----------------------------
class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        int pairCnt = 0, left = 0, right = 1, len = nums.size();
        while(left < len && right<len){
            if(left == right){
                right++;
                continue;
            }
            int diff = nums[right] - nums[left];
            if(diff > k){
                left++;
            }else if(diff<k){
                right++;
            }else{
                left++;
                while(left < len && nums[left]  == nums[left-1]){
                    left++;
                }
                pairCnt++;
            }
        }
        return pairCnt;
    }
};
----------------------------------------------------c++---------------------------
class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        unordered_map<int, int> freqMap;
        for(auto num : nums){
            freqMap[num]++;
        }
        int pairCnt = 0;
        if(k == 0){
            for(auto pr : freqMap){
                if(pr.second > 1){
                    pairCnt++;
                }
            }
            return pairCnt;
        }else{
            for(auto pr : freqMap){
                int ele = pr.first;
                if(freqMap.find(ele + k) != freqMap.end()){
                    pairCnt++;
                }
            }
            return pairCnt;
        }
    }
};
-----------------same as above approach in java----------trie using var here in loops--
class Solution {
    public int findPairs(int[] nums, int k) {
          Map<Integer, Integer> freqMap = new HashMap<>();
        for(var num : nums){
            freqMap.put(num, freqMap.getOrDefault(num, 0)+1);
        }
        int pairCnt = 0;
        if(k == 0){
            for(var pr : freqMap.entrySet()){
                if(pr.getValue() > 1){
                    pairCnt++;
                }
            }
            return pairCnt;
        }else{
            for(var pr : freqMap.entrySet()){
                int ele = pr.getKey();
                if(freqMap.containsKey(ele + k)){
                    pairCnt++;
                }
            }
            return pairCnt;
        }
    }
}
--------------------java using set and min value to keep check of duplicates-----
class Solution {
    public int findPairs(int[] nums, int k) {
            Set<Integer> uniquePair = new HashSet();
            Arrays.sort(nums);
            int n = nums.length;

            for (int i = 0; i < n - 1; i++)
                if (Arrays.binarySearch(nums, i + 1, n, nums[i] + k) > 0)
                    uniquePair.add(Math.min(nums[i], nums[i] + k));

            return uniquePair.size();
        }
}