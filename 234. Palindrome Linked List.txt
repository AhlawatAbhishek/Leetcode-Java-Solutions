/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head == null){
            return true;
        }
        int size = 0;
        ListNode temp = head;
        while(temp != null){
            temp = temp.next;
            size++;
        }
        if(size == 1){
            return true;
        }
        int arr[] = new int[size];
        ListNode tm = head;
        int i = 0;
        while(tm != null && i < arr.length){
            arr[i++] = tm.val;
            tm = tm.next;
        }
        int lo = 0, hi = arr.length-1, flag = 0;
        while(lo<hi){
            if(arr[lo] != arr[hi]){
                flag = 1;
                break;
            }
            lo++;
            hi--;
        }
        return flag == 0;
    }
}
--------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        StringBuilder pattern = new StringBuilder();
        ListNode temp = head;
        if(temp != null && temp.next == null){
            return true;
        }
        while(temp != null){
            pattern.append(temp.val+"");
            temp = temp.next;
        }
        return isPalindrome(pattern.toString());
    }
    public boolean isPalindrome(String str){
        int l = 0, r = str.length() - 1;
        while(l < r){
            if(str.charAt(l) != str.charAt(r)){
                return false;
            }
            l++;
            r--;
        }
        return true;
    }
}
----------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null){
            return true;
        }

        ListNode slow =head;
        ListNode fast = head;
        while(fast!=null && fast.next!=null){
            fast=fast.next;
            if(fast!=null){
                fast = fast.next;
            }

            slow = slow.next;
        }
        if(fast!=null){
            slow = slow.next;
        }
        ListNode head2 = reverse(slow);
        ListNode head1 = head;

        while(head1!=null && head2!=null){
            if(head1.val !=head2.val){
                return false;
            }

            head1 = head1.next;
            head2 = head2.next;
        }
        return true;
    }

    private ListNode reverse(ListNode head){
        if(head == null || head.next == null){
            return head;
        }
        ListNode curr = head;
        ListNode prev = null;

        while(curr!=null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;

    }
}