/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null){
            return null;
        }
        ListNode temp = head;
        while(temp.next != null && temp.next.next != null){
             int dummy  = temp.val;
             temp.val = temp.next.val;
             temp.next.val = dummy;
             temp = temp.next.next;
        }
        if(temp != null && temp.next != null){
             int dummy  = temp.val;
             temp.val = temp.next.val;
             temp.next.val = dummy;
        }
        return head;        
    }
}
-------------------------------
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode temp  = new ListNode(0);
        temp.next  = head;
        ListNode current = temp;
        while(current.next!=null && current.next.next != null){
            ListNode first =  current.next;
            ListNode second = current.next.next;
            first.next = second.next;
            current.next = second;
            second.next = first;
            current = current.next.next;            
        }
        return temp.next;
    }
}
---------------c++--------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head == NULL || head->next == NULL) return head;
        ListNode* curr = head;
        while(curr != NULL && curr->next != NULL){
            int tempVal = curr->val;
            curr->val = curr->next->val;
            curr->next->val = tempVal;
            curr = curr->next->next;
        }
        return head;
    }
};
----------------------------java--------------------------------
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode curr = head;
        while(curr != null && curr.next != null){
            int tempVal = curr.val;
            curr.val = curr.next.val;
            curr.next.val = tempVal;
            curr = curr.next.next;
        }
        return head;
    }
}