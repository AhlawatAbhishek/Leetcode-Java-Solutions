class Solution {
    public int minDistance(String word1, String word2) {
        int totalLen = word1.length() + word2.length();
        int lcs = findLcs(word1, word2);
        return totalLen - 2*lcs;
    }
    public int findLcs(String word1, String word2){
        int dp[][] = new int [word1.length() + 1 ][word2.length() + 1];
        for(int i = 1; i<dp.length; i++){
            for(int j = 1; j<dp[i].length; j++){
                if(word1.charAt(i-1) == word2.charAt(j-1)){
                    dp[i][j] = 1+ dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);
                }
            }
        }
        return dp[word1.length()][word2.length()];
    }
}
----------------------------------------------
class Solution {
    int dp[][];
    public int minDistance(String word1, String word2) {
        int totalLen = word1.length() + word2.length();
        dp = new int [word1.length() + 1 ][word2.length() + 1];
        for(int  i[] : dp){
            Arrays.fill(i, -1);
        }
        int lcs = findLcsRecur(word1, word2, word1.length(), word2.length());
        return totalLen - 2*lcs;
    }
    public int findLcsRecur(String s1, String s2, int len1, int len2){
        if(len1 == 0 || len2 == 0){
            return 0;
        }
        if(dp[len1][len2] != -1){
            return dp[len1][len2];
        }
        int res = 0;
        if(s1.charAt(len1-1) == s2.charAt(len2-1)){
           res =  1+ findLcsRecur(s1, s2, len1-1, len2-1);
        }else{
          res =  Math.max(findLcsRecur(s1, s2, len1-1, len2), findLcsRecur(s1, s2, len1, len2-1));
        }
        return dp[len1][len2] = res;
    }
}