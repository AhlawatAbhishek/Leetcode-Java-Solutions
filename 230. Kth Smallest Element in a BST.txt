class Solution {
    public int kthSmallest(TreeNode root, int k) {
        List<Integer> al = new ArrayList<>();
        preOrder(root, al);
        int ans = Integer.MIN_VALUE;
        Collections.sort(al);
        for(int i = 0; i< al.size()&&k>0; i++, k--){
            ans = al.get(i);
        }
        return ans;
    }
    public void preOrder(TreeNode node,List<Integer> al){
        if(node == null){
            return;
        }
        al.add(node.val);
        preOrder(node.left,  al);
        
        preOrder(node.right, al);
    }
}
------------------------------java----------------------------------------
class Solution {
int cnt = 0;
int kth = Integer.MIN_VALUE;
    public int kthSmallest(TreeNode root, int k) {
        find(root, k);
        return kth;
    }
    private void find(TreeNode root, int k){
        if(root == null)return;
        find(root.left, k);
        cnt++;
        if(cnt == k){
            kth = root.val;
        }
        find(root.right, k);
    }
}
---------------------------------c++--------------------------------------------
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode *> kthSt;
        while(true){
            while(root != NULL){
                kthSt.push(root);
                root = root->left;
            }
            root = kthSt.top();
            kthSt.pop();
            if(--k == 0)return root->val;
            else root = root->right;
        }
        return -1;
    }
};
