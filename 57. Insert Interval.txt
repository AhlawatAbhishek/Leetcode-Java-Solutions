class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        int i, j, phela = newInterval[0], dusra = newInterval[1];
        for(i = 0; i < intervals.length; i++){
            int first = intervals[i][0];
            int second = intervals[i][1];
            if(phela>=first && phela<=second){
                break;
            }
        }
         for(j = 0; j < intervals.length; j++){
            int first = intervals[j][0];
            int second = intervals[j][1];
            if(dusra>=first && dusra<=second){
                break;
            }
        }
        int fLimit = intervals[i][0], lLimit = intervals[j][1];
        ArrayList<ArrayList<Integer>> al = new ArrayList<>();
        for(int z = 0; z<i; z++){
            int first = intervals[z][0];
            int second = intervals[z][1];
            ArrayList<Integer> a = new ArrayList<>();
            a.add(first);
            a.add(second);
            al.add(a);
        }
        ArrayList<Integer> a = new ArrayList<>();
        a.add(fLimit);
        a.add(lLimit);
        al.add(a);
        for( int z = j+1; z<intervals.length; z++){
            int first = intervals[z][0];
            int second = intervals[z][1];
            ArrayList<Integer> aa = new ArrayList<>();
            aa.add(first);
            aa.add(second);
            al.add(aa);
        }
        int arr[][] = new int[al.size()][2];
        for(int x=0; x<arr.length; x++){
            ArrayList<Integer> aa = al.get(x);
            for(int y = 0; y<arr[0]; y++){
                arr[x][y] = aa.get(y);
            }
        }
        return arr;
    }
}
---------------------correct ans------------------
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
       List<int[]> result = new ArrayList<>();
        int i = 0, n = intervals.length;
        while(i<n && intervals[i][1]<newInterval[0]){
          result.add(intervals[i++]);  
        } 
        int mi[] = newInterval;
        while(i<n && intervals[i][0] <= newInterval[1]){
            mi[0] = Math.min(mi[0], intervals[i][0]);
            mi[1] = Math.max(mi[1], intervals[i++][1]);
        } 
        result.add(mi);
        while(i<n) result.add(intervals[i++]);
        return result.toArray(new int[result.size()][2]);
    }
}