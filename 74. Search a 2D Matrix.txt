class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        ArrayList<Integer> al = new ArrayList<>();
        for(int i = 0 ; i < matrix.length; i++){
            for(int j = 0 ; j < matrix[0].length; j++){
                al.add(matrix[i][j]);
            }
        }
        return al.contains(target);
    }
}------------------------------------------
--------------------------
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0){
            return false;
        }
        int rows = matrix.length;
        int  columns = matrix[0].length;
        int left = 0;
        int right = rows*columns -1;
        while(left <= right){
            int midpoint = left + (right - left) /2;
            int midpoint_element = matrix[midpoint/columns][midpoint%columns];
            if(midpoint_element == target){
                return true ;
            }else if(target < midpoint_element){
                right = midpoint -1;
            }else if(target > midpoint_element){
                left = midpoint + 1;
            }
        }
        return false;
    }
}