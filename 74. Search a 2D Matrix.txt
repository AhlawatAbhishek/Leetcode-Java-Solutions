class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        ArrayList<Integer> al = new ArrayList<>();
        for(int i = 0 ; i < matrix.length; i++){
            for(int j = 0 ; j < matrix[0].length; j++){
                al.add(matrix[i][j]);
            }
        }
        return al.contains(target);
    }
}------------------------------------------
--------------------------
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0){
            return false;
        }
        int rows = matrix.length;
        int  columns = matrix[0].length;
        int left = 0;
        int right = rows*columns -1;
        while(left <= right){
            int midpoint = left + (right - left) /2;
            int midpoint_element = matrix[midpoint/columns][midpoint%columns];
            if(midpoint_element == target){
                return true ;
            }else if(target < midpoint_element){
                right = midpoint -1;
            }else if(target > midpoint_element){
                left = midpoint + 1;
            }
        }
        return false;
    }
}
---------------------java-----------------------
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int x = 0, y = matrix[0].length-1;
        while(x < matrix.length && y>=0){
            int currCell = matrix[x][y];
            if(currCell == target)return true;
            if(currCell < target)x++;
            if(currCell > target)y--;
        }
        return false;
    }
}
------------C++------------------
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        return isHaving(matrix, 0, matrix[0].size()-1, target);
    }
private:
    bool isHaving(vector<vector<int>>& matrix, int x, int y, int target){
        if(x == matrix.size() || y == -1){
            return false;
        }
        if(target == matrix[x][y])return true;
        else if(target > matrix[x][y]){
            return isHaving(matrix, x+1, y, target);
        }else return isHaving(matrix, x, y-1, target);
    }
};
--------------------C++-----------------------------
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size(), cols = matrix[0].size(), left = 0, right = rows * cols - 1;
        while(left <= right){
            int mid = left + (right - left)/2;
            int midEle = matrix[mid/cols][mid%cols];
            if(target == midEle)return true;
            else if(target < midEle)right = mid -1;
            else left = mid + 1;
        }
        return false;
    }
};
