/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    final int mod = 1000000007;
    long totalSum = 0, maxProduct = Long.MIN_VALUE;
    public int maxProduct(TreeNode root) {
        dfs(root);
        findMaxProd(root);
        return (int)(maxProduct%mod);
    }
    public void dfs(TreeNode root){
        if(root == null) return;
        totalSum += (long)root.val;
        dfs(root.left);
        dfs(root.right);
    }
    public long findMaxProd(TreeNode root){
        if(root == null) return 0;
        long subTreeSum = findMaxProd(root.left) + findMaxProd(root.right) + root.val;
        long currProd = ((totalSum- subTreeSum) * subTreeSum);
        maxProduct = Math.max(maxProduct , currProd);
        return subTreeSum;
    }
}