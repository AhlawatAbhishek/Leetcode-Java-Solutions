class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> subset = new ArrayList<>();
        dfs(subset, 1, new ArrayList(), k , n);
        return subset;
    }
    void dfs(List<List<Integer>> subset, int index, List<Integer> current, int k, int target){
        if(current.size() == k){
            if(target == 0){
                subset.add(new ArrayList(current));
            }
            return;
        }
        for( int i = index; i <= 9; i++){
            current.add(i);
            dfs(subset, i+1, current, k, target-i);
            current.remove(current.size()-1);
        }

    }
}