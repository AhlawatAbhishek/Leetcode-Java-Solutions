------------------------------Post link----https://leetcode.com/problems/course-schedule-ii/discuss/1643104/Java-or-Topological-Sort-or-Handwritten-illustrations-easy-to-understand-%3A)
//Time complexity: O(V+E), iterating over V verticies and their neighbours in total number of neighbours traversed will be equal to E edges in the graph
//Space Complexity:O(V+E), V verticies stored in graph as keys and in total E edges.
class Solution {
    
    public int[] findOrder(int numCrs, int[][] preq) {
        HashMap<Integer, HashSet<Integer>> graph = new HashMap<>();
        int degree[] = new int[numCrs]; 
        makeGraphCalDegree(preq, graph, degree);
        int resOrdr[] = new int[numCrs];
      
        findOrder(resOrdr, graph, degree);
//Checking if we found solution i.e. is it possible to finsh all courses.
        boolean solNotPos = false;
        for(int deg : degree){
            if(deg != 0){
                solNotPos = true;
                break;
            }
        }

        return solNotPos ? new int[0] : resOrdr;
    }
    private void findOrder(int resOrdr[], HashMap<Integer, HashSet<Integer>> graph, int degree[]){
        Queue<Integer> que = new LinkedList<>();
        int numCrs = degree.length;
        for(int crs = 0; crs<numCrs; crs++){
            if(degree[crs] == 0){
                que.offer(crs);
            }
        }
        int rIndx = 0;
        while(!que.isEmpty()){
            int src = que.poll();
            resOrdr[rIndx++] = src;
            if(!graph.containsKey(src)) continue;
            for(int neigh : graph.get(src)){
                degree[neigh]--;
                if(degree[neigh] == 0){
                    que.offer(neigh);
                }
            }
        }
    }
    private void makeGraphCalDegree(int [][]preq, HashMap<Integer, HashSet<Integer>> graph, int degree[]){
        for(int pr[] : preq){
            int dest = pr[0], src = pr[1];
            degree[dest]++;
            graph.putIfAbsent(src, new HashSet<>());
            graph.get(src).add(dest);
        }
    }
}
If you found this post helpful then please like and comment to increase it's reach. :)
------------------------another approch with arraylist used as stack & DFS----------------
class Solution {
  static int WHITE = 1;
  static int GRAY = 2;
  static int BLACK = 3;

  boolean isPossible;
  Map<Integer, Integer> color;
  Map<Integer, List<Integer>> adjList;
  List<Integer> topologicalOrder;

  private void init(int numCourses) {
    this.isPossible = true;
    this.color = new HashMap<Integer, Integer>();
    this.adjList = new HashMap<Integer, List<Integer>>();
    this.topologicalOrder = new ArrayList<Integer>();

    // By default all vertces are WHITE
    for (int i = 0; i < numCourses; i++) {
      this.color.put(i, WHITE);
    }
  }

  private void dfs(int node) {

    // Don't recurse further if we found a cycle already
    if (!this.isPossible) {
      return;
    }

    // Start the recursion
    this.color.put(node, GRAY);

    // Traverse on neighboring vertices
    for (Integer neighbor : this.adjList.getOrDefault(node, new ArrayList<Integer>())) {
      if (this.color.get(neighbor) == WHITE) {
        this.dfs(neighbor);
      } else if (this.color.get(neighbor) == GRAY) {
        // An edge to a GRAY vertex represents a cycle
        this.isPossible = false;
      }
    }

    // Recursion ends. We mark it as black
    this.color.put(node, BLACK);
    this.topologicalOrder.add(node);
  }

  public int[] findOrder(int numCourses, int[][] prerequisites) {

    this.init(numCourses);

    // Create the adjacency list representation of the graph
    for (int i = 0; i < prerequisites.length; i++) {
      int dest = prerequisites[i][0];
      int src = prerequisites[i][1];
      List<Integer> lst = adjList.getOrDefault(src, new ArrayList<Integer>());
      lst.add(dest);
      adjList.put(src, lst);
    }

    // If the node is unprocessed, then call dfs on it.
    for (int i = 0; i < numCourses; i++) {
      if (this.color.get(i) == WHITE) {
        this.dfs(i);
      }
    }

    int[] order;
    if (this.isPossible) {
      order = new int[numCourses];
      for (int i = 0; i < numCourses; i++) {
        order[i] = this.topologicalOrder.get(numCourses - i - 1);
      }
    } else {
      order = new int[0];
    }

    return order;
  }
}