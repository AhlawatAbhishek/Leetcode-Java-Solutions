class Solution {
    public int orderOfLargestPlusSign(int n, int[][] mines) {
        int grid[][] = new int[n][n];
        for(int arr[] : grid){
            Arrays.fill(arr, 1);
        }
        for(int arr[] : mines){
            int r = arr[0];
            int c = arr[1];
            grid[r][c] =  0;
        }
        int lToRight[][] = new int[n][n];
        int rToLeft[][] = new int[n][n];
        int tToBottom[][] = new int[n][n];
        int bToTop[][] = new int[n][n];
        
        int runningSum = 0;
        for(int r =0; r < n; r++){
            runningSum = 0;
            for(int c = n-1; c>=0; c--){
                 if(grid[r][c] == 1){
                    runningSum += grid[r][c];
                 }else{
                     runningSum = 0;
                 }       
                rToLeft[r][c] = runningSum;
            }
            
        }
        runningSum = 0;
         for(int r =0; r < n; r++){
              runningSum = 0;
            for(int c = 0; c<n; c++){
                 if(grid[r][c] == 1){
                    runningSum += grid[r][c];
                 }else{
                     runningSum = 0;
                 }       
                lToRight[r][c] = runningSum;
            }
           
        }
       runningSum = 0;
         for(int c = 0; c<n; c++){
              runningSum = 0;
            for(int r =0; r < n; r++){
                 if(grid[r][c] == 1){
                    runningSum += grid[r][c];
                 }else{
                     runningSum = 0;
                 }       
                tToBottom[r][c] = runningSum;
            }
           
        }
        runningSum = 0;
        for(int c = 0; c<n; c++){
            runningSum = 0;
            for(int r =n-1; r >= 0; r--){
                 if(grid[r][c] == 1){
                    runningSum += grid[r][c];
                 }else{
                     runningSum = 0;
                 }       
                bToTop[r][c] = runningSum;
            }
            
        }
        int largestOrder = 0;
         for(int r =0; r < n; r++){
            for(int c = 0; c<n; c++){
              int min = Math.min(Math.min(bToTop[r][c], tToBottom[r][c]), Math.min(lToRight[r][c], rToLeft[r][c]));
                largestOrder = Math.max(largestOrder, min);
            }
        }
        return largestOrder;
    }
}