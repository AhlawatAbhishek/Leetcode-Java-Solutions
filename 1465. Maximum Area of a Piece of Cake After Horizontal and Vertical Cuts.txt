class Solution {
    public int maxArea(int h, int w, int[] hCuts, int[] vCuts) {
        Arrays.sort(hCuts);
        Arrays.sort(vCuts);
        int hDiff = Math.max(hCuts[0], h-hCuts[hCuts.length-1]);
        for(int i = 0; i<hCuts.length-1; i++){
            
            int diff = hCuts[i+1] - hCuts[i];
            hDiff = Math.max(hDiff, diff);
        }
        int vDiff = Math.max(vCuts[0], w-vCuts[vCuts.length-1]); 
        for(int i = 0; i<vCuts.length-1; i++){
            int diff = vCuts[i+1] - vCuts[i];
            vDiff = Math.max(vDiff, diff);
        }    
        long ans = 1L * hDiff * vDiff;
        return (int) (ans % 1000000007);
    }
}
---------------
class Solution {
    public int maxArea(int h, int w, int[] hCuts, int[] vCuts) {
        Arrays.sort(hCuts);
        Arrays.sort(vCuts);
        int hDiff = hCuts[0];
        for(int i = 0; i<hCuts.length-1; i++){
            if(i == 0){
                hDiff = Math.max(hDiff, hCuts[i]);
            }
            int diff = hCuts[i+1] - hCuts[i];
            hDiff = Math.max(hDiff, diff);
        }
        int vDiff = vCuts[0];
        for(int i = 0; i<vCuts.length-1; i++){
            if(i == 0){
                vDiff = Math.max(vDiff, vCuts[i]);
            }
            int diff = vCuts[i+1] - vCuts[i];
            vDiff = Math.max(vDiff, diff);
        }
        hDiff = Math.max(hDiff, h-hCuts[hCuts.length-1]);
        vDiff = Math.max(vDiff, w-vCuts[vCuts.length-1]);
        long ans = 1L * hDiff * vDiff;
        return (int) (ans % 1000000007);
    }
}