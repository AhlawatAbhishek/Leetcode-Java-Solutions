class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return nums[nums.length-k];
    }
}
-------------------------------
class Solution {
    public int findKthLargest(int[] nums, int k) {
        ArrayList<Integer> al = new ArrayList<>();
        for(int i : nums){
          
               al.add(i);
        
        }
        Collections.sort(al);
        int ans = -1;
        for(int i = al.size()-1 ; i>=0 && k >0; i--, k--){
            ans = al.get(i);
           
        }
        return ans;
    }
}
------------------
class Solution {
    public int findKthLargest(int[] nums, int k) {
      PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(int i : nums){
            minHeap.add(i);
            if(minHeap.size() > k){
                minHeap.remove();
            }
        }
        return minHeap.remove();
    }
}--------
PriorityQueue<Integer> maxHeap = new PriorityQueue<>(10, Collections.reverseOrder());