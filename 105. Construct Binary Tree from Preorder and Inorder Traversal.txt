/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder == null || inorder == null || inorder.length == 0 || preorder.length == 0){
            return null;
        }
      TreeNode node = this.buildTree(preorder, inorder, 0 , inorder.length-1, 0);
        return node;
    }    
    public TreeNode buildTree(int[] preorder, int[] inorder, int start, int end, int preIndex) {
        if(preIndex > preorder.length-1||start > end){
            return null;
        }
        TreeNode node = new TreeNode(preorder[preIndex]);
        if(start == end){
            return node;
        }
        int inIndex = search(inorder, node.val, start, end );
        node.left = buildTree(preorder, inorder, start, inIndex-1, preIndex+ 1);
        node.right = buildTree(preorder, inorder, inIndex+1, end, preIndex + inIndex -start + 1);
        return node;
    }
    public int search(int []in , int data, int start, int end){
        int i;
        for(i = start; i<= end; i++){
            if(data == in[i]){
                return i;
            }
          
        }
          return i;
    }
}