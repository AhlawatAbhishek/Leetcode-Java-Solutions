// Time complexity : O(N), N is length of the string
// Auxiliary Space : O(1), if we are not considering the charArr space used
class Solution {
    public String breakPalindrome(String palindrome) {
//         if length of string is 1 then it will remain as it is as it would not be possible to make it non palindrome by replacement
        if(palindrome.length() == 1) return "";
        int n = palindrome.length(), mid = -1;
        boolean nonAFound = false;
//         if the length is odd then find the index of the mid
        if(n % 2 != 0){
            mid = (int) (n / 2);
        }
        char charArr[] = palindrome.toCharArray();
        for(int indx = 0; indx<n; indx++){
//             if length is odd and its mid index skip it as replacing it would not have any effect
            if(mid != -1 && indx == mid) continue;
//             find first non 'a' and make it 'a', also set nonAfound true
            if(charArr[indx] != 'a'){
                charArr[indx] = 'a';
                nonAFound = true;
                break;
            }
        }
//         if non a found is not true then replace last character with b to get smallest possible answer lexicographically
        if(!nonAFound){
            charArr[n-1] = 'b';
        }
//         return the new string
        return new String(charArr);
    }
}
-----------------------------------------------c++----------------------------
#define ll long long
#define sza(x) ((int)x.size())
#define fo(i, a, b) for (ll i = a; i < b; i++)
class Solution
{
public:
    string breakPalindrome(string palindrome)
    {
        if (sza(palindrome) == 1)
        {
            return "";
        }
        bool done = false;
        int hlf = sza(palindrome) / 2;
        fo(indx, 0, hlf)
        {
            if (indx == hlf - 1 && palindrome[indx] != 'a')
            {
                palindrome[indx] = 'a';
                done = true;
                break;
            }else if (palindrome[indx] != 'a')
            {
                done = true;
                palindrome[indx] = 'a';
                break;
            }
        }
        if (!done)
        {
            if (sza(palindrome) % 2)
                hlf++;
            fo(indx, hlf, sza(palindrome))
            {

                if (indx == (sza(palindrome) - 1))
                {
                    if (palindrome[indx] != 'a')
                        palindrome[indx] = 'a';
                    else
                        palindrome[indx] = 'b';
                }else if (palindrome[indx] != 'a')
                {
                    done = true;
                    palindrome[indx] = 'a';
                    break;
                }
            }
        }
        return palindrome;
    }
};