class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root->left == NULL && root->right == NULL)return 1;
        long maxWidth = 1;
        deque<pair<TreeNode*, long>> deq;
        deq.push_back(make_pair(root, 0));
        while(!deq.empty()){
            int size = deq.size();
            pair<TreeNode*, long> head = deq.front();
            pair<TreeNode*, long>last;
            while(size-->0){
                last = deq.front();
                deq.pop_front();
                int currCol = last.second;
                TreeNode* currNode = last.first;
                if(currNode->left != NULL)deq.push_back(make_pair(currNode->left, 2l*currCol));
                if(currNode->right != NULL)deq.push_back(make_pair(currNode->right, 2l*currCol+1l));
            }
            maxWidth = max(maxWidth, last.second-head.second+1);
        }
        return maxWidth;
    }
};
--------------------java--------------------------------
Time complexity: O(n), n is the number of nodes in the tree
Auxiliary Space: O(w), w is the width of the tree excluding the null nodes; 
----Due to the nature of BFS, at any given moment, the queue holds no more than two levels of nodes. In the worst case, a level in a full binary tree contains at most half of the total nodes (i.e. n/2), this is also the level where the leaf nodes reside.  therefore O(w) - O(n)
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if (root == null)
            return 0;

        // queue of elements [(node, col_index)]
        LinkedList<Pair<TreeNode, Integer>> queue = new LinkedList<>();
        Integer maxWidth = 0;

        queue.addLast(new Pair<>(root, 0));
        while (queue.size() > 0) {
            Pair<TreeNode, Integer> head = queue.getFirst();

            // iterate through the current level
            Integer currLevelSize = queue.size();
            Pair<TreeNode, Integer> elem = null;
            for (int i = 0; i < currLevelSize; ++i) {
                elem = queue.removeFirst();
                TreeNode node = elem.getKey();
                if (node.left != null)
                    queue.addLast(new Pair<>(node.left, 2 * elem.getValue()));
                if (node.right != null)
                    queue.addLast(new Pair<>(node.right, 2 * elem.getValue() + 1));
            }

            // calculate the length of the current level,
            //   by comparing the first and last col_index.
            maxWidth = Math.max(maxWidth, elem.getValue() - head.getValue() + 1);
        }

        return maxWidth;
    }
}
