/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // Time complexity: O(n);
    // Space complexity or auxilliary space: O(logn), recursion call stack because of depth of binary tree
    int indx = 0;
    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {
        List<Integer> swaps = new ArrayList<>();     
        if(dfs(root, voyage, swaps)){
            return swaps;
        }else{
                  List<Integer> res = new ArrayList<>(); 
                  res.add(-1);
            return res;
        }  
    }
    public boolean dfs(TreeNode root, int[] voyage, List<Integer> swaps ){
        if(root == null){
            return true;
        }
        if(root.val != voyage[indx]){
            return false;
        }else{
            indx++;
            if(root.left != null && root.left.val != voyage[indx]){
                swaps.add(root.val);
                return dfs(root.right, voyage, swaps) && dfs(root.left, voyage, swaps);
            }else{
                return dfs(root.left, voyage, swaps) && dfs(root.right, voyage, swaps);
            }
        }
    }
}