class Solution {
    public String removeKdigits(String num, int k) {
        Stack<Character> st = new Stack<>();
        for(char c : num.toCharArray()){
            while(!st.isEmpty() && c < st.peek() && k > 0){
                st.pop();
                k--;
            }
            if(!st.isEmpty() || c != '0'){
                st.push(c);
            }
        }
        while(!st.isEmpty() && k-->0){
            st.pop();
            if(st.isEmpty()){
                return "0";
            }
        }
        if(st.isEmpty()){
            return "0";
        }
        StringBuilder answer = new StringBuilder();
        for(char c : st){
            answer.append(c);
        }
        return answer.toString();
------------------------------java----------------------------
class Solution {
    public String removeKdigits(String num, int k) {
       if(num.length() == 1 && k == 1)return "0"; 
       Stack<Character> st = new Stack<>();
       StringBuilder ans = new StringBuilder();
       for(int indx = 0; indx<num.length(); indx++){
           char c = num.charAt(indx);
           while(k>0 && !st.isEmpty() && st.peek()>c){
               st.pop();
               k--;
           }
           st.push(c);
       }
       while(k-- > 0){
           st.pop();
       }
       while(!st.isEmpty()){
           char ch = st.pop();
            ans.append(ch);
       }
       ans.reverse();
       int left = 0;
       while(left < ans.length()){
           if(ans.charAt(left) == '0'){
               left++;
           }else{
               break;
           }
       } 
       String res = ans.substring(left); 
       return res.length() == 0 ? "0" : res;
    }
    
}
------------------c++----------------------------------------------
class Solution {
public:
    string removeKdigits(string num, int k) {
       if(num.length() == 1 && k == 1)return "0"; 
       stack<char> st;
       string ans;
       for(int indx = 0; indx<num.length(); indx++){
           char c = num[indx];
           while(k>0 && !st.empty() && st.top()>c){
               st.pop();
               k--;
           }
           st.push(c);
       }
       while(k-- > 0){
           st.pop();
       }
       while(!st.empty()){
           char ch = st.top();
           st.pop();
            ans += ch;
       }
       int n = ans.length();
       for (int i = 0; i < n / 2; i++)
         swap(ans[i], ans[n - i - 1]);
       int left = 0;
       while(left < ans.length()){
           if(ans[left] == '0'){
               left++;
           }else{
               break;
           }
       } 
       string res = ans.substr(left); 
       return res.length() == 0 ? "0" : res;
    }
};