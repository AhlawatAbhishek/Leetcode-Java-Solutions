class Solution {
    public int kthSmallest(int[][] matrix, int k) {
       int n = matrix.length;
        Queue<Integer> queue = new PriorityQueue<>();
        for(int i = 0; i<n; i++){
           for(int j = 0; j<n; j++){
               queue.offer(matrix[i][j]);
           }
       }
       while(!queue.isEmpty() && k-->1){
           queue.poll();
       } 
       return queue.poll(); 
    }
}
--------------------------
class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        int ans = -1;
        int left = matrix[0][0], right = matrix[n-1][n-1];
        while(left <= right){
            int mid = left + (right - left)/2;
            if(countLessOrEqual(matrix, mid) < k){
                left = mid +1;
            }else if(countLessOrEqual(matrix, mid) >= k){
                ans = mid;
                right = mid-1;
            }
        }
        return ans;
    }
    public int countLessOrEqual(int[][]mat, int target){
        int n = mat.length;
        int c = n-1, count = 0;
        for(int r = 0; r<n; r++){
            while(c >= 0 && mat[r][c] > target){
                c--;
            }
            count += c+1;
        }
        return count;
    }
}