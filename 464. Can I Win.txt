class Solution {
    private int desired, range;
    private Boolean memo[] = null;
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
         if(maxChoosableInteger >= desiredTotal)return true;
         if((maxChoosableInteger+1)*maxChoosableInteger/2<desiredTotal)return false;
        range = maxChoosableInteger;
        desired = desiredTotal;
        memo = new Boolean[(1<<range)];
        return canIWinGame(0, 0);
    }
    private boolean canIWinGame(int currTotal, int state){
        if(memo[state] != null) return memo[state];
        for(int num = 1; num<=range; num++){
            //check if this number is not used previously by anyone
//decrementing num to make the state generated by or of it and state fit into memo array     
            int curr = 1<<(num-1);
            if((state&curr) == 0){
                if(currTotal+num>=desired|| !canIWinGame(currTotal+num, state|curr)){
                    return memo[state] = true;
                }
            }
        }
        return memo[state] = false;       
    }
}