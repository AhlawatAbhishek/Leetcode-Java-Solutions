class Solution {
    public int maximalSquare(char[][] matrix) {
         int maxLen = 0, rows = matrix.length, cols = matrix[0].length;
         for(int r = 0; r<rows; r++){
             for(int c = 0; c<cols; c++){
                 if(matrix[r][c] == '1'){
                     int currLen = 1;
                     boolean isOne = true;
                     while(currLen + r < rows && currLen + c < cols && isOne){
                         //check for one in rows
                         for(int rw = r; rw<=r+currLen; rw++){
                             if(matrix[rw][c+currLen] == '0'){
                                 isOne = false;
                                 break;
                             }
                         }
                         //check for one in cols
                         for(int cl = c; cl<=c+currLen; cl++){
                             if(matrix[r+currLen][cl] == '0'){
                                 isOne = false;
                                 break;
                             }
                         }     
                         if(isOne)currLen++;
                     }
                     maxLen = Math.max(currLen, maxLen);
                 } 
             }
         }
        return maxLen * maxLen;
    }
}
--------------------------------------------------------------------
class Solution {
    public int maximalSquare(char[][] matrix) {
         int maxLen = 0, rows = matrix.length, cols = matrix[0].length;
         int dp[][] = new int[rows][cols];
         for(int r = 0; r<rows; r++){
            dp[r][0] = matrix[r][0]-'0';
             maxLen = Math.max(maxLen, dp[r][0]);
         }
         for(int c =0 ; c<cols; c++){
             dp[0][c] = matrix[0][c]-'0';
             maxLen = Math.max(maxLen, dp[0][c]);
         }
         for(int r = 1; r<rows; r++){
             for(int c = 1; c<cols; c++){
                 if(matrix[r][c] == '0'){
                     dp[r][c] = 0;
                     continue;
                 }
                 dp[r][c] = Math.min(dp[r-1][c], Math.min(dp[r][c-1], dp[r-1][c-1])) + 1;
                 maxLen = Math.max(maxLen, dp[r][c]);
             }
         }
        return maxLen * maxLen;
    }
}