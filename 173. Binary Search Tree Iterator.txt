class BSTIterator {
    Stack<TreeNode> order = new Stack<>();
    public BSTIterator(TreeNode root) {
        partialInOrder(root);
    }
    
    void partialInOrder(TreeNode node){
        while(node != null){
            order.push(node);
            node = node.left;
        }
    }
    public int next() {
        TreeNode top = order.pop();
        partialInOrder(top.right);
        return top.val;
    }
    
    public boolean hasNext() {
        return !order.isEmpty();
    }
}

------------------------------------------

class BSTIterator {
    List<Integer> list = new ArrayList<>();
    int index = 0;
    public BSTIterator(TreeNode root) {
        inOrder(root);
    }
    void inOrder(TreeNode root){
        if(root == null){
            return;
        }
        inOrder(root.left);
        list.add(root.val);
        inOrder(root.right);
    }
    public int next() {
       return list.get(index++);
    }
    
    public boolean hasNext() {
         return index<list.size();
    }
}
----------------c++-----------------------
class BSTIterator {
private: 
    stack<TreeNode *> st;
public:
    BSTIterator(TreeNode* root) {
        nextInorder(root);
    }
    
    int next() {
        TreeNode *topMost = st.top();
        st.pop();
        if(topMost->right != NULL){
            nextInorder(topMost->right);
        }
        return topMost->val;
    }
    
    bool hasNext() {
        return !st.empty();
    }
private:
    void nextInorder(TreeNode * root){
        while(root != NULL){
            st.push(root);
            root = root->left;
        }
    }
};
